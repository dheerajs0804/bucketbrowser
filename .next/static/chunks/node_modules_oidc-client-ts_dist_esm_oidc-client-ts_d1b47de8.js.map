{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/utils/Logger.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/utils/JwtUtils.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/utils/CryptoUtils.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/utils/Event.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/utils/PopupUtils.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/utils/Timer.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/utils/UrlUtils.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/errors/ErrorResponse.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/errors/ErrorTimeout.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/AccessTokenEvents.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/CheckSessionIFrame.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/InMemoryWebStorage.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/errors/ErrorDPoPNonce.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/JsonService.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/MetadataService.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/WebStorageStateStore.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/OidcClientSettings.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/UserInfoService.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/TokenClient.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/ResponseValidator.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/State.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/SigninState.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/SigninRequest.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/SigninResponse.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/SignoutRequest.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/SignoutResponse.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/ClaimsService.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/DPoPStore.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/OidcClient.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/SessionMonitor.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/User.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/navigators/AbstractChildWindow.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/UserManagerSettings.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/navigators/IFrameWindow.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/navigators/IFrameNavigator.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/navigators/PopupWindow.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/navigators/PopupNavigator.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/navigators/RedirectNavigator.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/UserManagerEvents.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/SilentRenewService.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/RefreshState.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/UserManager.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/package.json","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/Version.ts","file:///D:/assignments/mern/bucketbrowser/node_modules/oidc-client-ts/src/IndexedDbDPoPStore.ts"],"sourcesContent":["// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * Native interface\n *\n * @public\n */\nexport interface ILogger {\n    debug(...args: unknown[]): void;\n    info(...args: unknown[]): void;\n    warn(...args: unknown[]): void;\n    error(...args: unknown[]): void;\n}\n\nconst nopLogger: ILogger = {\n    debug: () => undefined,\n    info: () => undefined,\n    warn: () => undefined,\n    error: () => undefined,\n};\n\nlet level: number;\nlet logger: ILogger;\n\n/**\n * Log levels\n *\n * @public\n */\nexport enum Log {\n    NONE,\n    ERROR,\n    WARN,\n    INFO,\n    DEBUG\n}\n\n/**\n * Log manager\n *\n * @public\n */\nexport namespace Log { // eslint-disable-line @typescript-eslint/no-namespace\n    export function reset(): void {\n        level = Log.INFO;\n        logger = nopLogger;\n    }\n\n    export function setLevel(value: Log): void {\n        if (!(Log.NONE <= value && value <= Log.DEBUG)) {\n            throw new Error(\"Invalid log level\");\n        }\n        level = value;\n    }\n\n    export function setLogger(value: ILogger): void {\n        logger = value;\n    }\n}\n\n/**\n * Internal logger instance\n *\n * @public\n */\nexport class Logger {\n    private _method?: string;\n    public constructor(private _name: string) {}\n\n    /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n    public debug(...args: unknown[]): void {\n        if (level >= Log.DEBUG) {\n            logger.debug(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    public info(...args: unknown[]): void {\n        if (level >= Log.INFO) {\n            logger.info(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    public warn(...args: unknown[]): void {\n        if (level >= Log.WARN) {\n            logger.warn(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    public error(...args: unknown[]): void {\n        if (level >= Log.ERROR) {\n            logger.error(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n\n    public throw(err: Error): never {\n        this.error(err);\n        throw err;\n    }\n\n    public create(method: string): Logger {\n        const methodLogger: Logger = Object.create(this);\n        methodLogger._method = method;\n        methodLogger.debug(\"begin\");\n        return methodLogger;\n    }\n\n    public static createStatic(name: string, staticMethod: string): Logger {\n        const staticLogger = new Logger(`${name}.${staticMethod}`);\n        staticLogger.debug(\"begin\");\n        return staticLogger;\n    }\n\n    private static _format(name: string, method?: string) {\n        const prefix = `[${name}]`;\n        return method ? `${prefix} ${method}:` : prefix;\n    }\n\n    /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n    // helpers for static class methods\n    public static debug(name: string, ...args: unknown[]): void {\n        if (level >= Log.DEBUG) {\n            logger.debug(Logger._format(name), ...args);\n        }\n    }\n    public static info(name: string, ...args: unknown[]): void {\n        if (level >= Log.INFO) {\n            logger.info(Logger._format(name), ...args);\n        }\n    }\n    public static warn(name: string, ...args: unknown[]): void {\n        if (level >= Log.WARN) {\n            logger.warn(Logger._format(name), ...args);\n        }\n    }\n    public static error(name: string, ...args: unknown[]): void {\n        if (level >= Log.ERROR) {\n            logger.error(Logger._format(name), ...args);\n        }\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n}\n\nLog.reset();\n","import { jwtDecode } from \"jwt-decode\";\n\nimport { Logger } from \"./Logger\";\nimport type { JwtClaims } from \"../Claims\";\nimport { CryptoUtils } from \"./CryptoUtils\";\n\n/**\n * @internal\n */\nexport class JwtUtils {\n    // IMPORTANT: doesn't validate the token\n    public static decode(token: string): JwtClaims {\n        try {\n            return jwtDecode<JwtClaims>(token);\n        }\n        catch (err) {\n            Logger.error(\"JwtUtils.decode\", err);\n            throw err;\n        }\n    }\n\n    public static async generateSignedJwt(header: object, payload: object, privateKey: CryptoKey) : Promise<string> {\n        const encodedHeader = CryptoUtils.encodeBase64Url(new TextEncoder().encode(JSON.stringify(header)));\n        const encodedPayload = CryptoUtils.encodeBase64Url(new TextEncoder().encode(JSON.stringify(payload)));\n        const encodedToken = `${encodedHeader}.${encodedPayload}`;\n\n        const signature = await window.crypto.subtle.sign(\n            {\n                name: \"ECDSA\",\n                hash: { name: \"SHA-256\" },\n            },\n            privateKey,\n            new TextEncoder().encode(encodedToken),\n        );\n\n        const encodedSignature = CryptoUtils.encodeBase64Url(new Uint8Array(signature));\n        return `${encodedToken}.${encodedSignature}`;\n    }\n}\n","import { Logger } from \"./Logger\";\nimport { JwtUtils } from \"./JwtUtils\";\n\nexport interface GenerateDPoPProofOpts {\n    url: string;\n    accessToken?: string;\n    httpMethod?: string;\n    keyPair: CryptoKeyPair;\n    nonce?: string;\n}\n\nconst UUID_V4_TEMPLATE = \"10000000-1000-4000-8000-100000000000\";\n\nconst toBase64 = (val: ArrayBuffer): string =>\n    btoa([...new Uint8Array(val)]\n        .map((chr) => String.fromCharCode(chr))\n        .join(\"\"));\n\n/**\n * @internal\n */\nexport class CryptoUtils {\n    private static _randomWord(): number {\n        const arr = new Uint32Array(1);\n        crypto.getRandomValues(arr);\n        return arr[0];\n    }\n\n    /**\n     * Generates RFC4122 version 4 guid\n     */\n    public static generateUUIDv4(): string {\n        const uuid = UUID_V4_TEMPLATE.replace(/[018]/g, c =>\n            (+c ^ CryptoUtils._randomWord() & 15 >> +c / 4).toString(16),\n        );\n        return uuid.replace(/-/g, \"\");\n    }\n\n    /**\n     * PKCE: Generate a code verifier\n     */\n    public static generateCodeVerifier(): string {\n        return CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4();\n    }\n\n    /**\n     * PKCE: Generate a code challenge\n     */\n    public static async generateCodeChallenge(code_verifier: string): Promise<string> {\n        if (!crypto.subtle) {\n            throw new Error(\"Crypto.subtle is available only in secure contexts (HTTPS).\");\n        }\n\n        try {\n            const encoder = new TextEncoder();\n            const data = encoder.encode(code_verifier);\n            const hashed = await crypto.subtle.digest(\"SHA-256\", data);\n            return toBase64(hashed).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n        }\n        catch (err) {\n            Logger.error(\"CryptoUtils.generateCodeChallenge\", err);\n            throw err;\n        }\n    }\n\n    /**\n     * Generates a base64-encoded string for a basic auth header\n     */\n    public static generateBasicAuth(client_id: string, client_secret: string): string {\n        const encoder = new TextEncoder();\n        const data = encoder.encode([client_id, client_secret].join(\":\"));\n        return toBase64(data);\n    }\n\n    /**\n     * Generates a hash of a string using a given algorithm\n     * @param alg\n     * @param message\n     */\n    public static async hash(alg: string, message: string) : Promise<Uint8Array> {\n        const msgUint8 = new TextEncoder().encode(message);\n        const hashBuffer = await crypto.subtle.digest(alg, msgUint8);\n        return new Uint8Array(hashBuffer);\n    }\n\n    /**\n     * Generates a base64url encoded string\n     */\n    public static encodeBase64Url = (input: Uint8Array) => {\n        return toBase64(input).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    };\n\n    /**\n     * Generates a rfc7638 compliant jwk thumbprint\n     * @param jwk\n     */\n    public static async customCalculateJwkThumbprint(jwk: JsonWebKey): Promise<string> {\n        let jsonObject: object;\n        switch (jwk.kty) {\n            case \"RSA\":\n                jsonObject = {\n                    \"e\": jwk.e,\n                    \"kty\": jwk.kty,\n                    \"n\": jwk.n,\n                };\n                break;\n            case \"EC\":\n                jsonObject = {\n                    \"crv\": jwk.crv,\n                    \"kty\": jwk.kty,\n                    \"x\": jwk.x,\n                    \"y\": jwk.y,\n                };\n                break;\n            case \"OKP\":\n                jsonObject = {\n                    \"crv\": jwk.crv,\n                    \"kty\": jwk.kty,\n                    \"x\": jwk.x,\n                };\n                break;\n            case \"oct\":\n                jsonObject = {\n                    \"crv\": jwk.k,\n                    \"kty\": jwk.kty,\n                };\n                break;\n            default:\n                throw new Error(\"Unknown jwk type\");\n        }\n        const utf8encodedAndHashed = await CryptoUtils.hash(\"SHA-256\", JSON.stringify(jsonObject));\n        return CryptoUtils.encodeBase64Url(utf8encodedAndHashed);\n    }\n\n    public static async generateDPoPProof({\n        url,\n        accessToken,\n        httpMethod,\n        keyPair,\n        nonce,\n    }: GenerateDPoPProofOpts): Promise<string> {\n        let hashedToken: Uint8Array;\n        let encodedHash: string;\n\n        const payload: Record<string, string | number> = {\n            \"jti\": window.crypto.randomUUID(),\n            \"htm\": httpMethod ?? \"GET\",\n            \"htu\": url,\n            \"iat\": Math.floor(Date.now() / 1000),\n        };\n\n        if (accessToken) {\n            hashedToken = await CryptoUtils.hash(\"SHA-256\", accessToken);\n            encodedHash = CryptoUtils.encodeBase64Url(hashedToken);\n            payload.ath = encodedHash;\n        }\n\n        if (nonce) {\n            payload.nonce = nonce;\n        }\n\n        try {\n            const publicJwk = await crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n            const header = {\n                \"alg\": \"ES256\",\n                \"typ\": \"dpop+jwt\",\n                \"jwk\": {\n                    \"crv\": publicJwk.crv,\n                    \"kty\": publicJwk.kty,\n                    \"x\": publicJwk.x,\n                    \"y\": publicJwk.y,\n                },\n            };\n            return await JwtUtils.generateSignedJwt(header, payload, keyPair.privateKey);\n        } catch (err) {\n            if (err instanceof TypeError) {\n                throw new Error(`Error exporting dpop public key: ${err.message}`);\n            } else {\n                throw err;\n            }\n        }\n    }\n\n    public static async generateDPoPJkt(keyPair: CryptoKeyPair) : Promise<string> {\n        try {\n            const publicJwk = await crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n            return await CryptoUtils.customCalculateJwkThumbprint(publicJwk);\n        } catch (err) {\n            if (err instanceof TypeError) {\n                throw new Error(`Could not retrieve dpop keys from storage: ${err.message}`);\n            } else {\n                throw err;\n            }\n        }\n    }\n\n    public static async generateDPoPKeys() : Promise<CryptoKeyPair> {\n        return await window.crypto.subtle.generateKey(\n            {\n                name: \"ECDSA\",\n                namedCurve: \"P-256\",\n            },\n            false,\n            [\"sign\", \"verify\"],\n        );\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./Logger\";\n\n/**\n * @internal\n */\nexport type Callback<EventType extends unknown[]> = (...ev: EventType) => (Promise<void> | void);\n\n/**\n * @internal\n */\nexport class Event<EventType extends unknown[]> {\n    protected readonly _logger: Logger;\n\n    private readonly _callbacks: Array<Callback<EventType>> = [];\n\n    public constructor(protected readonly _name: string) {\n        this._logger = new Logger(`Event('${this._name}')`);\n    }\n\n    public addHandler(cb: Callback<EventType>): () => void {\n        this._callbacks.push(cb);\n        return () => this.removeHandler(cb);\n    }\n\n    public removeHandler(cb: Callback<EventType>): void {\n        const idx = this._callbacks.lastIndexOf(cb);\n        if (idx >= 0) {\n            this._callbacks.splice(idx, 1);\n        }\n    }\n\n    public async raise(...ev: EventType): Promise<void> {\n        this._logger.debug(\"raise:\", ...ev);\n        for (const cb of this._callbacks) {\n            await cb(...ev);\n        }\n    }\n}\n","/**\n *\n * @public\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open#window_features\n */\nexport interface PopupWindowFeatures {\n    left?: number;\n    top?: number;\n    width?: number;\n    height?: number;\n    menubar?: boolean | string;\n    toolbar?: boolean | string;\n    location?: boolean | string;\n    status?: boolean | string;\n    resizable?: boolean | string;\n    scrollbars?: boolean | string;\n    /** Close popup window after time in seconds, by default it is -1. To enable this feature, set value greater than 0. */\n    closePopupWindowAfterInSeconds?: number;\n\n    [k: string]: boolean | string | number | undefined;\n}\n\nexport class PopupUtils {\n    /**\n     * Populates a map of window features with a placement centered in front of\n     * the current window. If no explicit width is given, a default value is\n     * binned into [800, 720, 600, 480, 360] based on the current window's width.\n     */\n    static center({ ...features }: PopupWindowFeatures): PopupWindowFeatures {\n        if (features.width == null)\n            features.width = [800, 720, 600, 480].find(width => width <= window.outerWidth / 1.618) ?? 360;\n        features.left ??= Math.max(0, Math.round(window.screenX + (window.outerWidth - features.width) / 2));\n        if (features.height != null)\n            features.top ??= Math.max(0, Math.round(window.screenY + (window.outerHeight - features.height) / 2));\n        return features;\n    }\n\n    static serialize(features: PopupWindowFeatures): string {\n        return Object.entries(features)\n            .filter(([, value]) => value != null)\n            .map(([key, value]) => `${key}=${typeof value !== \"boolean\" ? value as string : value ? \"yes\" : \"no\"}`)\n            .join(\",\");\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Event } from \"./Event\";\nimport { Logger } from \"./Logger\";\n\n/**\n * @internal\n */\nexport class Timer extends Event<[void]> {\n    protected readonly _logger = new Logger(`Timer('${this._name}')`);\n    private _timerHandle: ReturnType<typeof setInterval> | null = null;\n    private _expiration = 0;\n\n    // get the time\n    public static getEpochTime(): number {\n        return Math.floor(Date.now() / 1000);\n    }\n\n    public init(durationInSeconds: number): void {\n        const logger = this._logger.create(\"init\");\n        durationInSeconds = Math.max(Math.floor(durationInSeconds), 1);\n        const expiration = Timer.getEpochTime() + durationInSeconds;\n        if (this.expiration === expiration && this._timerHandle) {\n            // no need to reinitialize to same expiration, so bail out\n            logger.debug(\"skipping since already initialized for expiration at\", this.expiration);\n            return;\n        }\n\n        this.cancel();\n\n        logger.debug(\"using duration\", durationInSeconds);\n        this._expiration = expiration;\n\n        // we're using a fairly short timer and then checking the expiration in the\n        // callback to handle scenarios where the browser device sleeps, and then\n        // the timers end up getting delayed.\n        const timerDurationInSeconds = Math.min(durationInSeconds, 5);\n        this._timerHandle = setInterval(this._callback, timerDurationInSeconds * 1000);\n    }\n\n    public get expiration(): number {\n        return this._expiration;\n    }\n\n    public cancel(): void {\n        this._logger.create(\"cancel\");\n        if (this._timerHandle) {\n            clearInterval(this._timerHandle);\n            this._timerHandle = null;\n        }\n    }\n\n    protected _callback = (): void => {\n        const diff = this._expiration - Timer.getEpochTime();\n        this._logger.debug(\"timer completes in\", diff);\n\n        if (this._expiration <= Timer.getEpochTime()) {\n            this.cancel();\n            void super.raise();\n        }\n    };\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * @internal\n */\nexport class UrlUtils {\n    public static readParams(url: string, responseMode: \"query\" | \"fragment\" = \"query\"): URLSearchParams {\n        if (!url) throw new TypeError(\"Invalid URL\");\n        // the base URL is irrelevant, it's just here to support relative url arguments\n        const parsedUrl = new URL(url, \"http://127.0.0.1\");\n        const params = parsedUrl[responseMode === \"fragment\" ? \"hash\" : \"search\"];\n        return new URLSearchParams(params.slice(1));\n    }\n}\n\n/**\n * @internal\n */\nexport const URL_STATE_DELIMITER = \";\";","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\n\n/**\n * Error class thrown in case of an authentication error.\n *\n * @public\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthError\n */\nexport class ErrorResponse extends Error {\n    /** Marker to detect class: \"ErrorResponse\" */\n    public readonly name: string = \"ErrorResponse\";\n\n    /** An error code string that can be used to classify the types of errors that occur and to respond to errors. */\n    public readonly error: string | null;\n    /** additional information that can help a developer identify the cause of the error.*/\n    public readonly error_description: string | null;\n    /**\n     * URI identifying a human-readable web page with information about the error, used to provide the client\n       developer with additional information about the error.\n    */\n    public readonly error_uri: string | null;\n\n    /** custom state data set during the initial signin request */\n    public state?: unknown;\n\n    public readonly session_state: string | null;\n\n    public url_state?: string;\n\n    public constructor(\n        args: {\n            error?: string | null; error_description?: string | null; error_uri?: string | null;\n            userState?: unknown; session_state?: string | null; url_state?: string;\n        },\n        /** The x-www-form-urlencoded request body sent to the authority server */\n        public readonly form?: URLSearchParams,\n    ) {\n        super(args.error_description || args.error || \"\");\n\n        if (!args.error) {\n            Logger.error(\"ErrorResponse\", \"No error passed\");\n            throw new Error(\"No error passed\");\n        }\n\n        this.error = args.error;\n        this.error_description = args.error_description ?? null;\n        this.error_uri = args.error_uri ?? null;\n\n        this.state = args.userState;\n        this.session_state = args.session_state ?? null;\n        this.url_state = args.url_state;\n    }\n}\n","// Copyright (C) 2021 AuthTS Contributors\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * Error class thrown in case of network timeouts (e.g IFrame time out).\n *\n * @public\n */\nexport class ErrorTimeout extends Error {\n    /** Marker to detect class: \"ErrorTimeout\" */\n    public readonly name: string = \"ErrorTimeout\";\n\n    public constructor(message?: string) {\n        super(message);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Timer } from \"./utils\";\nimport type { User } from \"./User\";\n\n/**\n * @public\n */\nexport type AccessTokenCallback = (...ev: unknown[]) => (Promise<void> | void);\n\n/**\n * @public\n */\nexport class AccessTokenEvents {\n    protected readonly _logger = new Logger(\"AccessTokenEvents\");\n\n    private readonly _expiringTimer = new Timer(\"Access token expiring\");\n    private readonly _expiredTimer = new Timer(\"Access token expired\");\n    private readonly _expiringNotificationTimeInSeconds: number;\n\n    public constructor(args: { expiringNotificationTimeInSeconds: number }) {\n        this._expiringNotificationTimeInSeconds = args.expiringNotificationTimeInSeconds;\n    }\n\n    public async load(container: User): Promise<void> {\n        const logger = this._logger.create(\"load\");\n        // only register events if there's an access token and it has an expiration\n        if (container.access_token && container.expires_in !== undefined) {\n            const duration = container.expires_in;\n            logger.debug(\"access token present, remaining duration:\", duration);\n\n            if (duration > 0) {\n                // only register expiring if we still have time\n                let expiring = duration - this._expiringNotificationTimeInSeconds;\n                if (expiring <= 0) {\n                    expiring = 1;\n                }\n\n                logger.debug(\"registering expiring timer, raising in\", expiring, \"seconds\");\n                this._expiringTimer.init(expiring);\n            }\n            else {\n                logger.debug(\"canceling existing expiring timer because we're past expiration.\");\n                this._expiringTimer.cancel();\n            }\n\n            // if it's negative, it will still fire\n            const expired = duration + 1;\n            logger.debug(\"registering expired timer, raising in\", expired, \"seconds\");\n            this._expiredTimer.init(expired);\n        }\n        else {\n            this._expiringTimer.cancel();\n            this._expiredTimer.cancel();\n        }\n    }\n\n    public async unload(): Promise<void> {\n        this._logger.debug(\"unload: canceling existing access token timers\");\n        this._expiringTimer.cancel();\n        this._expiredTimer.cancel();\n    }\n\n    /**\n     * Add callback: Raised prior to the access token expiring.\n     */\n    public addAccessTokenExpiring(cb: AccessTokenCallback): () => void {\n        return this._expiringTimer.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised prior to the access token expiring.\n     */\n    public removeAccessTokenExpiring(cb: AccessTokenCallback): void {\n        this._expiringTimer.removeHandler(cb);\n    }\n\n    /**\n     * Add callback: Raised after the access token has expired.\n     */\n    public addAccessTokenExpired(cb: AccessTokenCallback): () => void {\n        return this._expiredTimer.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised after the access token has expired.\n     */\n    public removeAccessTokenExpired(cb: AccessTokenCallback): void {\n        this._expiredTimer.removeHandler(cb);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\n\n/**\n * @internal\n */\nexport class CheckSessionIFrame {\n    private readonly _logger = new Logger(\"CheckSessionIFrame\");\n    private _frame_origin: string;\n    private _frame: HTMLIFrameElement;\n    private _timer: ReturnType<typeof setInterval> | null = null;\n    private _session_state: string | null = null;\n\n    public constructor(\n        private _callback: () => Promise<void>,\n        private _client_id: string,\n        url: string,\n        private _intervalInSeconds: number,\n        private _stopOnError: boolean,\n    ) {\n        const parsedUrl = new URL(url);\n        this._frame_origin = parsedUrl.origin;\n\n        this._frame = window.document.createElement(\"iframe\");\n\n        // shotgun approach\n        this._frame.style.visibility = \"hidden\";\n        this._frame.style.position = \"fixed\";\n        this._frame.style.left = \"-1000px\";\n        this._frame.style.top = \"0\";\n        this._frame.width = \"0\";\n        this._frame.height = \"0\";\n        this._frame.src = parsedUrl.href;\n    }\n\n    public load(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            this._frame.onload = () => {\n                resolve();\n            };\n\n            window.document.body.appendChild(this._frame);\n            window.addEventListener(\"message\", this._message, false);\n        });\n    }\n\n    private _message = (e: MessageEvent<string>): void => {\n        if (e.origin === this._frame_origin &&\n            e.source === this._frame.contentWindow\n        ) {\n            if (e.data === \"error\") {\n                this._logger.error(\"error message from check session op iframe\");\n                if (this._stopOnError) {\n                    this.stop();\n                }\n            }\n            else if (e.data === \"changed\") {\n                this._logger.debug(\"changed message from check session op iframe\");\n                this.stop();\n                void this._callback();\n            }\n            else {\n                this._logger.debug(e.data + \" message from check session op iframe\");\n            }\n        }\n    };\n\n    public start(session_state: string): void {\n        if (this._session_state === session_state) {\n            return;\n        }\n\n        this._logger.create(\"start\");\n\n        this.stop();\n\n        this._session_state = session_state;\n\n        const send = () => {\n            if (!this._frame.contentWindow || !this._session_state) {\n                return;\n            }\n\n            this._frame.contentWindow.postMessage(this._client_id + \" \" + this._session_state, this._frame_origin);\n        };\n\n        // trigger now\n        send();\n\n        // and setup timer\n        this._timer = setInterval(send, this._intervalInSeconds * 1000);\n    }\n\n    public stop(): void {\n        this._logger.create(\"stop\");\n        this._session_state = null;\n\n        if (this._timer) {\n\n            clearInterval(this._timer);\n            this._timer = null;\n        }\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\n\n/**\n * @public\n */\nexport class InMemoryWebStorage implements Storage {\n    private readonly _logger = new Logger(\"InMemoryWebStorage\");\n    private _data: Record<string, string> = {};\n\n    public clear(): void {\n        this._logger.create(\"clear\");\n        this._data = {};\n    }\n\n    public getItem(key: string): string {\n        this._logger.create(`getItem('${key}')`);\n        return this._data[key];\n    }\n\n    public setItem(key: string, value: string): void {\n        this._logger.create(`setItem('${key}')`);\n        this._data[key] = value;\n    }\n\n    public removeItem(key: string): void {\n        this._logger.create(`removeItem('${key}')`);\n        delete this._data[key];\n    }\n\n    public get length(): number {\n        return Object.getOwnPropertyNames(this._data).length;\n    }\n\n    public key(index: number): string {\n        return Object.getOwnPropertyNames(this._data)[index];\n    }\n}\n","export class ErrorDPoPNonce extends Error {\n    /** Marker to detect class: \"ErrorDPoPNonce\" */\n    public readonly name: string = \"ErrorDPoPNonce\";\n    public readonly nonce: string;\n\n    public constructor(nonce: string, message?: string) {\n        super(message);\n        this.nonce = nonce;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { ErrorResponse, ErrorTimeout } from \"./errors\";\nimport type { ExtraHeader } from \"./OidcClientSettings\";\nimport { Logger } from \"./utils\";\nimport { ErrorDPoPNonce } from \"./errors/ErrorDPoPNonce\";\n\n/**\n * @internal\n */\nexport type JwtHandler = (text: string) => Promise<Record<string, unknown>>;\n\n/**\n * @internal\n */\nexport interface GetJsonOpts {\n    token?: string;\n    credentials?: RequestCredentials;\n    timeoutInSeconds?: number;\n}\n\n/**\n * @internal\n */\nexport interface PostFormOpts {\n    body: URLSearchParams;\n    basicAuth?: string;\n    timeoutInSeconds?: number;\n    initCredentials?: \"same-origin\" | \"include\" | \"omit\";\n    extraHeaders?: Record<string, ExtraHeader>;\n}\n\n/**\n * @internal\n */\nexport class JsonService {\n    private readonly _logger = new Logger(\"JsonService\");\n\n    private _contentTypes: string[] = [];\n\n    public constructor(\n        additionalContentTypes: string[] = [],\n        private _jwtHandler: JwtHandler | null = null,\n        private _extraHeaders: Record<string, ExtraHeader> = {},\n    ) {\n        this._contentTypes.push(...additionalContentTypes, \"application/json\");\n        if (_jwtHandler) {\n            this._contentTypes.push(\"application/jwt\");\n        }\n    }\n\n    protected async fetchWithTimeout(input: RequestInfo, init: RequestInit & { timeoutInSeconds?: number } = {}) {\n        const { timeoutInSeconds, ...initFetch } = init;\n        if (!timeoutInSeconds) {\n            return await fetch(input, initFetch);\n        }\n\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), timeoutInSeconds * 1000);\n\n        try {\n            const response = await fetch(input, {\n                ...init,\n                signal: controller.signal,\n            });\n            return response;\n        }\n        catch (err) {\n            if (err instanceof DOMException && err.name === \"AbortError\") {\n                throw new ErrorTimeout(\"Network timed out\");\n            }\n            throw err;\n        }\n        finally {\n            clearTimeout(timeoutId);\n        }\n    }\n\n    public async getJson(url: string, {\n        token,\n        credentials,\n        timeoutInSeconds,\n    }: GetJsonOpts = {}): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"getJson\");\n        const headers: HeadersInit = {\n            \"Accept\": this._contentTypes.join(\", \"),\n        };\n        if (token) {\n            logger.debug(\"token passed, setting Authorization header\");\n            headers[\"Authorization\"] = \"Bearer \" + token;\n        }\n\n        this._appendExtraHeaders(headers);\n\n        let response: Response;\n        try {\n            logger.debug(\"url:\", url);\n            response = await this.fetchWithTimeout(url, { method: \"GET\", headers, timeoutInSeconds, credentials });\n        }\n        catch (err) {\n            logger.error(\"Network Error\");\n            throw err;\n        }\n\n        logger.debug(\"HTTP response received, status\", response.status);\n        const contentType = response.headers.get(\"Content-Type\");\n        if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\n            logger.throw(new Error(`Invalid response Content-Type: ${(contentType ?? \"undefined\")}, from URL: ${url}`));\n        }\n        if (response.ok && this._jwtHandler && contentType?.startsWith(\"application/jwt\")) {\n            return await this._jwtHandler(await response.text());\n        }\n        let json: Record<string, unknown>;\n        try {\n            json = await response.json();\n        }\n        catch (err) {\n            logger.error(\"Error parsing JSON response\", err);\n            if (response.ok) throw err;\n            throw new Error(`${response.statusText} (${response.status})`);\n        }\n        if (!response.ok) {\n            logger.error(\"Error from server:\", json);\n            if (json.error) {\n                throw new ErrorResponse(json);\n            }\n            throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n        }\n        return json;\n    }\n\n    public async postForm(url: string, {\n        body,\n        basicAuth,\n        timeoutInSeconds,\n        initCredentials,\n        extraHeaders,\n    }: PostFormOpts): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"postForm\");\n        const headers: HeadersInit = {\n            \"Accept\": this._contentTypes.join(\", \"),\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            ...extraHeaders,\n        };\n        if (basicAuth !== undefined) {\n            headers[\"Authorization\"] = \"Basic \" + basicAuth;\n        }\n\n        this._appendExtraHeaders(headers);\n\n        let response: Response;\n        try {\n            logger.debug(\"url:\", url);\n            response = await this.fetchWithTimeout(url, { method: \"POST\", headers, body, timeoutInSeconds, credentials: initCredentials });\n        }\n        catch (err) {\n            logger.error(\"Network error\");\n            throw err;\n        }\n\n        logger.debug(\"HTTP response received, status\", response.status);\n        const contentType = response.headers.get(\"Content-Type\");\n        if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\n            throw new Error(`Invalid response Content-Type: ${(contentType ?? \"undefined\")}, from URL: ${url}`);\n        }\n\n        const responseText = await response.text();\n\n        let json: Record<string, unknown> = {};\n        if (responseText) {\n            try {\n                json = JSON.parse(responseText);\n            }\n            catch (err) {\n                logger.error(\"Error parsing JSON response\", err);\n                if (response.ok) throw err;\n                throw new Error(`${response.statusText} (${response.status})`);\n            }\n        }\n\n        if (!response.ok) {\n            logger.error(\"Error from server:\", json);\n            if (response.headers.has(\"dpop-nonce\")) {\n                const nonce = response.headers.get(\"dpop-nonce\") as string;\n                throw new ErrorDPoPNonce(nonce, `${JSON.stringify(json)}`);\n            }\n            if (json.error) {\n                throw new ErrorResponse(json, body);\n            }\n            throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n        }\n\n        return json;\n    }\n\n    private _appendExtraHeaders(\n        headers: Record<string, string>,\n    ): void {\n        const logger = this._logger.create(\"appendExtraHeaders\");\n        const customKeys = Object.keys(this._extraHeaders);\n        const protectedHeaders = [\n            \"accept\",\n            \"content-type\",\n        ];\n        const preventOverride = [\n            \"authorization\",\n        ];\n        if (customKeys.length === 0) {\n            return;\n        }\n        customKeys.forEach((headerName) => {\n            if (protectedHeaders.includes(headerName.toLocaleLowerCase())) {\n                logger.warn(\"Protected header could not be set\", headerName, protectedHeaders);\n                return;\n            }\n            if (preventOverride.includes(headerName.toLocaleLowerCase()) &&\n                Object.keys(headers).includes(headerName)) {\n                logger.warn(\"Header could not be overridden\", headerName, preventOverride);\n                return;\n            }\n            const content = (typeof this._extraHeaders[headerName] === \"function\") ?\n                (this._extraHeaders[headerName] as ()=>string)() :\n                this._extraHeaders[headerName];\n            if (content && content !== \"\") {\n                headers[headerName] = content;\n            }\n        });\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { OidcClientSettingsStore, SigningKey } from \"./OidcClientSettings\";\nimport type { OidcMetadata } from \"./OidcMetadata\";\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n */\nexport class MetadataService {\n    private readonly _logger = new Logger(\"MetadataService\");\n    private readonly _jsonService;\n\n    // cache\n    private _metadataUrl: string;\n    private _signingKeys: SigningKey[] | null = null;\n    private _metadata: Partial<OidcMetadata> | null = null;\n    private _fetchRequestCredentials: RequestCredentials | undefined;\n\n    public constructor(private readonly _settings: OidcClientSettingsStore) {\n        this._metadataUrl = this._settings.metadataUrl;\n        this._jsonService = new JsonService(\n            [\"application/jwk-set+json\"],\n            null,\n            this._settings.extraHeaders,\n        );\n        if (this._settings.signingKeys) {\n            this._logger.debug(\"using signingKeys from settings\");\n            this._signingKeys = this._settings.signingKeys;\n        }\n\n        if (this._settings.metadata) {\n            this._logger.debug(\"using metadata from settings\");\n            this._metadata = this._settings.metadata;\n        }\n\n        if (this._settings.fetchRequestCredentials) {\n            this._logger.debug(\"using fetchRequestCredentials from settings\");\n            this._fetchRequestCredentials = this._settings.fetchRequestCredentials;\n        }\n    }\n\n    public resetSigningKeys(): void {\n        this._signingKeys = null;\n    }\n\n    public async getMetadata(): Promise<Partial<OidcMetadata>> {\n        const logger = this._logger.create(\"getMetadata\");\n        if (this._metadata) {\n            logger.debug(\"using cached values\");\n            return this._metadata;\n        }\n\n        if (!this._metadataUrl) {\n            logger.throw(new Error(\"No authority or metadataUrl configured on settings\"));\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        logger.debug(\"getting metadata from\", this._metadataUrl);\n        const metadata = await this._jsonService.getJson(this._metadataUrl, { credentials: this._fetchRequestCredentials, timeoutInSeconds: this._settings.requestTimeoutInSeconds });\n\n        logger.debug(\"merging remote JSON with seed metadata\");\n        this._metadata = Object.assign({}, metadata, this._settings.metadataSeed);\n        return this._metadata;\n    }\n\n    public getIssuer(): Promise<string> {\n        return this._getMetadataProperty(\"issuer\") as Promise<string>;\n    }\n\n    public getAuthorizationEndpoint(): Promise<string> {\n        return this._getMetadataProperty(\"authorization_endpoint\") as Promise<string>;\n    }\n\n    public getUserInfoEndpoint(): Promise<string> {\n        return this._getMetadataProperty(\"userinfo_endpoint\") as Promise<string>;\n    }\n\n    public getTokenEndpoint(optional: false): Promise<string>;\n    public getTokenEndpoint(optional?: true): Promise<string | undefined>;\n    public getTokenEndpoint(optional = true): Promise<string | undefined> {\n        return this._getMetadataProperty(\"token_endpoint\", optional) as Promise<string | undefined>;\n    }\n\n    public getCheckSessionIframe(): Promise<string | undefined> {\n        return this._getMetadataProperty(\"check_session_iframe\", true) as Promise<string | undefined>;\n    }\n\n    public getEndSessionEndpoint(): Promise<string | undefined> {\n        return this._getMetadataProperty(\"end_session_endpoint\", true) as Promise<string | undefined>;\n    }\n\n    public getRevocationEndpoint(optional: false): Promise<string>;\n    public getRevocationEndpoint(optional?: true): Promise<string | undefined>;\n    public getRevocationEndpoint(optional = true): Promise<string | undefined> {\n        return this._getMetadataProperty(\"revocation_endpoint\", optional) as Promise<string | undefined>;\n    }\n\n    public getKeysEndpoint(optional: false): Promise<string>;\n    public getKeysEndpoint(optional?: true): Promise<string | undefined>;\n    public getKeysEndpoint(optional = true): Promise<string | undefined> {\n        return this._getMetadataProperty(\"jwks_uri\", optional) as Promise<string | undefined>;\n    }\n\n    protected async _getMetadataProperty(name: keyof OidcMetadata, optional=false): Promise<string | boolean | string[] | undefined> {\n        const logger = this._logger.create(`_getMetadataProperty('${name}')`);\n\n        const metadata = await this.getMetadata();\n        logger.debug(\"resolved\");\n\n        if (metadata[name] === undefined) {\n            if (optional === true) {\n                logger.warn(\"Metadata does not contain optional property\");\n                return undefined;\n            }\n\n            logger.throw(new Error(\"Metadata does not contain property \" + name));\n        }\n\n        return metadata[name];\n    }\n\n    public async getSigningKeys(): Promise<SigningKey[] | null> {\n        const logger = this._logger.create(\"getSigningKeys\");\n        if (this._signingKeys) {\n            logger.debug(\"returning signingKeys from cache\");\n            return this._signingKeys;\n        }\n\n        const jwks_uri = await this.getKeysEndpoint(false);\n        logger.debug(\"got jwks_uri\", jwks_uri);\n\n        const keySet = await this._jsonService.getJson(jwks_uri, { timeoutInSeconds: this._settings.requestTimeoutInSeconds });\n        logger.debug(\"got key set\", keySet);\n\n        if (!Array.isArray(keySet.keys)) {\n            logger.throw(new Error(\"Missing keys on keyset\"));\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        this._signingKeys = keySet.keys;\n        return this._signingKeys;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport type { StateStore } from \"./StateStore\";\nimport type { AsyncStorage } from \"./AsyncStorage\";\n\n/**\n * @public\n */\nexport class WebStorageStateStore implements StateStore {\n    private readonly _logger = new Logger(\"WebStorageStateStore\");\n\n    private readonly _store: AsyncStorage | Storage;\n    private readonly _prefix: string;\n\n    public constructor({\n        prefix = \"oidc.\",\n        store = localStorage,\n    }: { prefix?: string; store?: AsyncStorage | Storage } = {}) {\n        this._store = store;\n        this._prefix = prefix;\n    }\n\n    public async set(key: string, value: string): Promise<void> {\n        this._logger.create(`set('${key}')`);\n\n        key = this._prefix + key;\n        await this._store.setItem(key, value);\n    }\n\n    public async get(key: string): Promise<string | null> {\n        this._logger.create(`get('${key}')`);\n\n        key = this._prefix + key;\n        const item = await this._store.getItem(key);\n        return item;\n    }\n\n    public async remove(key: string): Promise<string | null> {\n        this._logger.create(`remove('${key}')`);\n\n        key = this._prefix + key;\n        const item = await this._store.getItem(key);\n        await this._store.removeItem(key);\n        return item;\n    }\n\n    public async getAllKeys(): Promise<string[]> {\n        this._logger.create(\"getAllKeys\");\n        const len = await this._store.length;\n\n        const keys = [];\n        for (let index = 0; index < len; index++) {\n            const key = await this._store.key(index);\n            if (key && key.indexOf(this._prefix) === 0) {\n                keys.push(key.substr(this._prefix.length));\n            }\n        }\n        return keys;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { WebStorageStateStore } from \"./WebStorageStateStore\";\nimport type { OidcMetadata } from \"./OidcMetadata\";\nimport type { StateStore } from \"./StateStore\";\nimport { InMemoryWebStorage } from \"./InMemoryWebStorage\";\nimport type { DPoPStore } from \"./DPoPStore\";\n\nconst DefaultResponseType = \"code\";\nconst DefaultScope = \"openid\";\nconst DefaultClientAuthentication = \"client_secret_post\";\nconst DefaultStaleStateAgeInSeconds = 60 * 15;\n\n/**\n * @public\n */\nexport type SigningKey = Record<string, string | string[]>;\n\n/**\n * @public\n */\nexport type ExtraHeader = string | (() => string);\n\n/**\n * Optional DPoP settings\n * @public\n */\nexport interface DPoPSettings {\n    bind_authorization_code?: boolean;\n    store: DPoPStore;\n}\n\n/**\n * The settings used to configure the {@link OidcClient}.\n *\n * @public\n */\nexport interface OidcClientSettings {\n    /** The URL of the OIDC/OAuth2 provider */\n    authority: string;\n    metadataUrl?: string;\n    /** Provide metadata when authority server does not allow CORS on the metadata endpoint */\n    metadata?: Partial<OidcMetadata>;\n    /** Can be used to seed or add additional values to the results of the discovery request */\n    metadataSeed?: Partial<OidcMetadata>;\n    /** Provide signingKeys when authority server does not allow CORS on the jwks uri */\n    signingKeys?: SigningKey[];\n\n    /** Your client application's identifier as registered with the OIDC/OAuth2 */\n    client_id: string;\n    client_secret?: string;\n    /** The type of response desired from the OIDC/OAuth2 provider (default: \"code\") */\n    response_type?: string;\n    /** The scope being requested from the OIDC/OAuth2 provider (default: \"openid\") */\n    scope?: string;\n    /** The redirect URI of your client application to receive a response from the OIDC/OAuth2 provider */\n    redirect_uri: string;\n    /** The OIDC/OAuth2 post-logout redirect URI */\n    post_logout_redirect_uri?: string;\n\n    /**\n     * Client authentication method that is used to authenticate when using the token endpoint (default: \"client_secret_post\")\n     * - \"client_secret_basic\": using the HTTP Basic authentication scheme\n     * - \"client_secret_post\": including the client credentials in the request body\n     *\n     * See https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\n     */\n    client_authentication?: \"client_secret_basic\" | \"client_secret_post\";\n\n    /** optional protocol param */\n    prompt?: string;\n    /** optional protocol param */\n    display?: string;\n    /** optional protocol param */\n    max_age?: number;\n    /** optional protocol param */\n    ui_locales?: string;\n    /** optional protocol param */\n    acr_values?: string;\n    /** optional protocol param */\n    resource?: string | string[];\n\n    /**\n     * Optional protocol param\n     * The response mode used by the authority server is defined by the response_type unless explicitly specified:\n     * - Response mode for the OAuth 2.0 response type \"code\" is the \"query\" encoding\n     * - Response mode for the OAuth 2.0 response type \"token\" is the \"fragment\" encoding\n     *\n     * @see https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#ResponseModes\n     */\n    response_mode?: \"query\" | \"fragment\";\n\n    /**\n     * Should optional OIDC protocol claims be removed from profile or specify the ones to be removed (default: true)\n     * When true, the following claims are removed by default: [\"nbf\", \"jti\", \"auth_time\", \"nonce\", \"acr\", \"amr\", \"azp\", \"at_hash\"]\n     * When specifying claims, the following claims are not allowed: [\"sub\", \"iss\", \"aud\", \"exp\", \"iat\"]\n    */\n    filterProtocolClaims?: boolean | string[];\n    /** Flag to control if additional identity data is loaded from the user info endpoint in order to populate the user's profile (default: false) */\n    loadUserInfo?: boolean;\n    /** Number (in seconds) indicating the age of state entries in storage for authorize requests that are considered abandoned and thus can be cleaned up (default: 900) */\n    staleStateAgeInSeconds?: number;\n\n    /**\n     * Indicates how objects returned from the user info endpoint as claims (e.g. `address`) are merged into the claims from the\n     * id token as a single object.  (default: `{ array: \"replace\" }`)\n     * - array: \"replace\": natives (string, int, float) and arrays are replaced, objects are merged as distinct objects\n     * - array: \"merge\": natives (string, int, float) are replaced, arrays and objects are merged as distinct objects\n     */\n    mergeClaimsStrategy?: { array: \"replace\" | \"merge\" };\n\n    /**\n     * Storage object used to persist interaction state (default: window.localStorage, InMemoryWebStorage iff no window).\n     * E.g. `stateStore: new WebStorageStateStore({ store: window.localStorage })`\n     */\n    stateStore?: StateStore;\n\n    /**\n     * An object containing additional query string parameters to be including in the authorization request.\n     * E.g, when using Azure AD to obtain an access token an additional resource parameter is required. extraQueryParams: `{resource:\"some_identifier\"}`\n     */\n    extraQueryParams?: Record<string, string | number | boolean>;\n\n    extraTokenParams?: Record<string, unknown>;\n\n    /**\n     * An object containing additional header to be including in request.\n     */\n    extraHeaders?: Record<string, ExtraHeader>;\n\n    /**\n     * DPoP enabled or disabled\n     */\n    dpop?: DPoPSettings | undefined;\n\n    /**\n     * Will check the content type header of the response of the revocation endpoint to match these passed values (default: [])\n     */\n    revokeTokenAdditionalContentTypes?: string[];\n    /**\n     * Will disable PKCE validation, changing to true will not append to sign in request code_challenge and code_challenge_method. (default: false)\n     */\n    disablePKCE?: boolean;\n    /**\n     * Sets the credentials for fetch requests. (default: \"same-origin\")\n     * Use this if you need to send cookies to the OIDC/OAuth2 provider or if you are using a proxy that requires cookies\n     */\n    fetchRequestCredentials?: RequestCredentials;\n\n    /**\n     * Only scopes in this list will be passed in the token refresh request.\n     */\n    refreshTokenAllowedScope?: string | undefined;\n\n    /**\n     * Defines request timeouts globally across all requests made to the authorisation server\n     */\n    requestTimeoutInSeconds?: number | undefined;\n\n    /**\n     * https://datatracker.ietf.org/doc/html/rfc6749#section-3.3 describes behavior when omitting scopes from sign in requests\n     * If the IDP supports default scopes, this setting will ignore the scopes property passed to the config. (Default: false)\n     */\n    omitScopeWhenRequesting?: boolean;\n}\n\n/**\n * The settings with defaults applied of the {@link OidcClient}.\n *\n * @public\n * @see {@link OidcClientSettings}\n */\nexport class OidcClientSettingsStore {\n    // metadata\n    public readonly authority: string;\n    public readonly metadataUrl: string;\n    public readonly metadata: Partial<OidcMetadata> | undefined;\n    public readonly metadataSeed: Partial<OidcMetadata> | undefined;\n    public readonly signingKeys: SigningKey[] | undefined;\n\n    // client config\n    public readonly client_id: string;\n    public readonly client_secret: string | undefined;\n    public readonly response_type: string;\n    public readonly scope: string;\n    public readonly redirect_uri: string;\n    public readonly post_logout_redirect_uri: string | undefined;\n    public readonly client_authentication: \"client_secret_basic\" | \"client_secret_post\";\n\n    // optional protocol params\n    public readonly prompt: string | undefined;\n    public readonly display: string | undefined;\n    public readonly max_age: number | undefined;\n    public readonly ui_locales: string | undefined;\n    public readonly acr_values: string | undefined;\n    public readonly resource: string | string[] | undefined;\n    public readonly response_mode: \"query\" | \"fragment\" | undefined;\n\n    // behavior flags\n    public readonly filterProtocolClaims: boolean | string[];\n    public readonly loadUserInfo: boolean;\n    public readonly staleStateAgeInSeconds: number;\n    public readonly mergeClaimsStrategy: { array: \"replace\" | \"merge\" };\n    public readonly omitScopeWhenRequesting: boolean;\n\n    public readonly stateStore: StateStore;\n\n    // extra\n    public readonly extraQueryParams: Record<string, string | number | boolean>;\n    public readonly extraTokenParams: Record<string, unknown>;\n    public readonly dpop: DPoPSettings | undefined;\n    public readonly extraHeaders: Record<string, ExtraHeader>;\n\n    public readonly revokeTokenAdditionalContentTypes?: string[];\n    public readonly fetchRequestCredentials: RequestCredentials;\n    public readonly refreshTokenAllowedScope: string | undefined;\n    public readonly disablePKCE: boolean;\n    public readonly requestTimeoutInSeconds: number | undefined;\n\n    public constructor({\n        // metadata related\n        authority, metadataUrl, metadata, signingKeys, metadataSeed,\n        // client related\n        client_id, client_secret, response_type = DefaultResponseType, scope = DefaultScope,\n        redirect_uri, post_logout_redirect_uri,\n        client_authentication = DefaultClientAuthentication,\n        // optional protocol\n        prompt, display, max_age, ui_locales, acr_values, resource, response_mode,\n        // behavior flags\n        filterProtocolClaims = true,\n        loadUserInfo = false,\n        requestTimeoutInSeconds,\n        staleStateAgeInSeconds = DefaultStaleStateAgeInSeconds,\n        mergeClaimsStrategy = { array: \"replace\" },\n        disablePKCE = false,\n        // other behavior\n        stateStore,\n        revokeTokenAdditionalContentTypes,\n        fetchRequestCredentials,\n        refreshTokenAllowedScope,\n        // extra\n        extraQueryParams = {},\n        extraTokenParams = {},\n        extraHeaders = {},\n        dpop,\n        omitScopeWhenRequesting = false,\n    }: OidcClientSettings) {\n\n        this.authority = authority;\n\n        if (metadataUrl) {\n            this.metadataUrl = metadataUrl;\n        } else {\n            this.metadataUrl = authority;\n            if (authority) {\n                if (!this.metadataUrl.endsWith(\"/\")) {\n                    this.metadataUrl += \"/\";\n                }\n                this.metadataUrl += \".well-known/openid-configuration\";\n            }\n        }\n\n        this.metadata = metadata;\n        this.metadataSeed = metadataSeed;\n        this.signingKeys = signingKeys;\n\n        this.client_id = client_id;\n        this.client_secret = client_secret;\n        this.response_type = response_type;\n        this.scope = scope;\n        this.redirect_uri = redirect_uri;\n        this.post_logout_redirect_uri = post_logout_redirect_uri;\n        this.client_authentication = client_authentication;\n\n        this.prompt = prompt;\n        this.display = display;\n        this.max_age = max_age;\n        this.ui_locales = ui_locales;\n        this.acr_values = acr_values;\n        this.resource = resource;\n        this.response_mode = response_mode;\n\n        this.filterProtocolClaims = filterProtocolClaims ?? true;\n        this.loadUserInfo = !!loadUserInfo;\n        this.staleStateAgeInSeconds = staleStateAgeInSeconds;\n        this.mergeClaimsStrategy = mergeClaimsStrategy;\n        this.omitScopeWhenRequesting = omitScopeWhenRequesting;\n        this.disablePKCE = !!disablePKCE;\n        this.revokeTokenAdditionalContentTypes = revokeTokenAdditionalContentTypes;\n\n        this.fetchRequestCredentials = fetchRequestCredentials ? fetchRequestCredentials : \"same-origin\";\n        this.requestTimeoutInSeconds = requestTimeoutInSeconds;\n\n        if (stateStore) {\n            this.stateStore = stateStore;\n        }\n        else {\n            const store = typeof window !== \"undefined\" ? window.localStorage : new InMemoryWebStorage();\n            this.stateStore = new WebStorageStateStore({ store });\n        }\n\n        this.refreshTokenAllowedScope = refreshTokenAllowedScope;\n\n        this.extraQueryParams = extraQueryParams;\n        this.extraTokenParams = extraTokenParams;\n        this.extraHeaders = extraHeaders;\n\n        this.dpop = dpop;\n        if (this.dpop && !this.dpop?.store) {\n            throw new Error(\"A DPoPStore is required when dpop is enabled\");\n        }\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, JwtUtils } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { MetadataService } from \"./MetadataService\";\nimport type { JwtClaims } from \"./Claims\";\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\n\n/**\n * @internal\n */\nexport class UserInfoService {\n    protected readonly _logger = new Logger(\"UserInfoService\");\n    private readonly _jsonService: JsonService;\n\n    public constructor(private readonly _settings: OidcClientSettingsStore,\n        private readonly _metadataService: MetadataService,\n    ) {\n        this._jsonService = new JsonService(\n            undefined,\n            this._getClaimsFromJwt,\n            this._settings.extraHeaders,\n        );\n    }\n\n    public async getClaims(token: string): Promise<JwtClaims> {\n        const logger = this._logger.create(\"getClaims\");\n        if (!token) {\n            this._logger.throw(new Error(\"No token passed\"));\n        }\n\n        const url = await this._metadataService.getUserInfoEndpoint();\n        logger.debug(\"got userinfo url\", url);\n\n        const claims = await this._jsonService.getJson(url, {\n            token,\n            credentials: this._settings.fetchRequestCredentials,\n            timeoutInSeconds: this._settings.requestTimeoutInSeconds,\n        });\n        logger.debug(\"got claims\", claims);\n\n        return claims;\n    }\n\n    protected _getClaimsFromJwt = async (responseText: string): Promise<JwtClaims> => {\n        const logger = this._logger.create(\"_getClaimsFromJwt\");\n        try {\n            const payload = JwtUtils.decode(responseText);\n            logger.debug(\"JWT decoding successful\");\n\n            return payload;\n        } catch (err) {\n            logger.error(\"Error parsing JWT response\");\n            throw err;\n        }\n    };\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { CryptoUtils, Logger } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { MetadataService } from \"./MetadataService\";\nimport type { ExtraHeader, OidcClientSettingsStore } from \"./OidcClientSettings\";\n\n/**\n * @internal\n */\nexport interface ExchangeCodeArgs {\n    client_id?: string;\n    client_secret?: string;\n    redirect_uri?: string;\n\n    grant_type?: string;\n    code: string;\n    code_verifier?: string;\n\n    extraHeaders?: Record<string, ExtraHeader>;\n}\n\n/**\n * @internal\n */\nexport interface ExchangeCredentialsArgs {\n    client_id?: string;\n    client_secret?: string;\n\n    grant_type?: string;\n    scope?: string;\n\n    username: string;\n    password: string;\n}\n\n/**\n * @internal\n */\nexport interface ExchangeRefreshTokenArgs {\n    client_id?: string;\n    client_secret?: string;\n    redirect_uri?: string;\n\n    grant_type?: string;\n    refresh_token: string;\n    scope?: string;\n    resource?: string | string[];\n\n    timeoutInSeconds?: number;\n\n    extraHeaders?: Record<string, ExtraHeader>;\n}\n\n/**\n * @internal\n */\nexport interface RevokeArgs {\n    token: string;\n    token_type_hint?: \"access_token\" | \"refresh_token\";\n}\n\n/**\n * @internal\n */\nexport class TokenClient {\n    private readonly _logger = new Logger(\"TokenClient\");\n    private readonly _jsonService;\n\n    public constructor(\n        private readonly _settings: OidcClientSettingsStore,\n        private readonly _metadataService: MetadataService,\n    ) {\n        this._jsonService = new JsonService(\n            this._settings.revokeTokenAdditionalContentTypes,\n            null,\n            this._settings.extraHeaders,\n        );\n    }\n\n    /**\n     * Exchange code.\n     *\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3\n     */\n    public async exchangeCode({\n        grant_type = \"authorization_code\",\n        redirect_uri = this._settings.redirect_uri,\n        client_id = this._settings.client_id,\n        client_secret = this._settings.client_secret,\n        extraHeaders,\n        ...args\n    }: ExchangeCodeArgs): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"exchangeCode\");\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n        if (!redirect_uri) {\n            logger.throw(new Error(\"A redirect_uri is required\"));\n        }\n        if (!args.code) {\n            logger.throw(new Error(\"A code is required\"));\n        }\n\n        const params = new URLSearchParams({ grant_type, redirect_uri });\n        for (const [key, value] of Object.entries(args)) {\n            if (value != null) {\n                params.set(key, value);\n            }\n        }\n        let basicAuth: string | undefined;\n        switch (this._settings.client_authentication) {\n            case \"client_secret_basic\":\n                if (client_secret === undefined || client_secret === null) {\n                    logger.throw(new Error(\"A client_secret is required\"));\n                    // eslint-disable-next-line @typescript-eslint/only-throw-error\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\n                }\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n                break;\n            case \"client_secret_post\":\n                params.append(\"client_id\", client_id);\n                if (client_secret) {\n                    params.append(\"client_secret\", client_secret);\n                }\n                break;\n        }\n\n        const url = await this._metadataService.getTokenEndpoint(false);\n        logger.debug(\"got token endpoint\");\n\n        const response = await this._jsonService.postForm(url, {\n            body: params,\n            basicAuth,\n            timeoutInSeconds: this._settings.requestTimeoutInSeconds,\n            initCredentials: this._settings.fetchRequestCredentials,\n            extraHeaders,\n        });\n\n        logger.debug(\"got response\");\n\n        return response;\n    }\n\n    /**\n     * Exchange credentials.\n     *\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.3.2\n     */\n    public async exchangeCredentials({\n        grant_type = \"password\",\n        client_id = this._settings.client_id,\n        client_secret = this._settings.client_secret,\n        scope = this._settings.scope,\n        ...args\n    }: ExchangeCredentialsArgs): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"exchangeCredentials\");\n\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n\n        const params = new URLSearchParams({ grant_type });\n        if (!this._settings.omitScopeWhenRequesting) {\n            params.set(\"scope\", scope);\n        }\n        for (const [key, value] of Object.entries(args)) {\n            if (value != null) {\n                params.set(key, value);\n            }\n        }\n\n        let basicAuth: string | undefined;\n        switch (this._settings.client_authentication) {\n            case \"client_secret_basic\":\n                if (client_secret === undefined || client_secret === null) {\n                    logger.throw(new Error(\"A client_secret is required\"));\n                    // eslint-disable-next-line @typescript-eslint/only-throw-error\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\n                }\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n                break;\n            case \"client_secret_post\":\n                params.append(\"client_id\", client_id);\n                if (client_secret) {\n                    params.append(\"client_secret\", client_secret);\n                }\n                break;\n        }\n\n        const url = await this._metadataService.getTokenEndpoint(false);\n        logger.debug(\"got token endpoint\");\n\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth, timeoutInSeconds: this._settings.requestTimeoutInSeconds, initCredentials: this._settings.fetchRequestCredentials });\n        logger.debug(\"got response\");\n\n        return response;\n    }\n\n    /**\n     * Exchange a refresh token.\n     *\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-6\n     */\n    public async exchangeRefreshToken({\n        grant_type = \"refresh_token\",\n        client_id = this._settings.client_id,\n        client_secret = this._settings.client_secret,\n        timeoutInSeconds,\n        extraHeaders,\n        ...args\n    }: ExchangeRefreshTokenArgs): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"exchangeRefreshToken\");\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n        if (!args.refresh_token) {\n            logger.throw(new Error(\"A refresh_token is required\"));\n        }\n\n        const params = new URLSearchParams({ grant_type });\n        for (const [key, value] of Object.entries(args)) {\n            if (Array.isArray(value)) {\n                value.forEach(param => params.append(key, param));\n            }\n            else if (value != null) {\n                params.set(key, value);\n            }\n        }\n        let basicAuth: string | undefined;\n        switch (this._settings.client_authentication) {\n            case \"client_secret_basic\":\n                if (client_secret === undefined || client_secret === null) {\n                    logger.throw(new Error(\"A client_secret is required\"));\n                    // eslint-disable-next-line @typescript-eslint/only-throw-error\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\n                }\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n                break;\n            case \"client_secret_post\":\n                params.append(\"client_id\", client_id);\n                if (client_secret) {\n                    params.append(\"client_secret\", client_secret);\n                }\n                break;\n        }\n\n        const url = await this._metadataService.getTokenEndpoint(false);\n        logger.debug(\"got token endpoint\");\n\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth, timeoutInSeconds, initCredentials: this._settings.fetchRequestCredentials, extraHeaders });\n        logger.debug(\"got response\");\n\n        return response;\n    }\n\n    /**\n     * Revoke an access or refresh token.\n     *\n     * @see https://datatracker.ietf.org/doc/html/rfc7009#section-2.1\n     */\n    public async revoke(args: RevokeArgs): Promise<void> {\n        const logger = this._logger.create(\"revoke\");\n        if (!args.token) {\n            logger.throw(new Error(\"A token is required\"));\n        }\n\n        const url = await this._metadataService.getRevocationEndpoint(false);\n\n        logger.debug(`got revocation endpoint, revoking ${args.token_type_hint ?? \"default token type\"}`);\n\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(args)) {\n            if (value != null) {\n                params.set(key, value);\n            }\n        }\n        params.set(\"client_id\", this._settings.client_id);\n        if (this._settings.client_secret) {\n            params.set(\"client_secret\", this._settings.client_secret);\n        }\n\n        await this._jsonService.postForm(url, { body: params, timeoutInSeconds: this._settings.requestTimeoutInSeconds });\n        logger.debug(\"got response\");\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, JwtUtils } from \"./utils\";\nimport { ErrorResponse } from \"./errors\";\nimport type { MetadataService } from \"./MetadataService\";\nimport { UserInfoService } from \"./UserInfoService\";\nimport { TokenClient } from \"./TokenClient\";\nimport type { ExtraHeader, OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport type { SigninState } from \"./SigninState\";\nimport type { SigninResponse } from \"./SigninResponse\";\nimport type { State } from \"./State\";\nimport type { SignoutResponse } from \"./SignoutResponse\";\nimport type { UserProfile } from \"./User\";\nimport type { RefreshState } from \"./RefreshState\";\nimport type { IdTokenClaims } from \"./Claims\";\nimport type { ClaimsService } from \"./ClaimsService\";\n\n/**\n * @internal\n */\nexport class ResponseValidator {\n    protected readonly _logger = new Logger(\"ResponseValidator\");\n    protected readonly _userInfoService: UserInfoService;\n    protected readonly _tokenClient: TokenClient;\n\n    public constructor(\n        protected readonly _settings: OidcClientSettingsStore,\n        protected readonly _metadataService: MetadataService,\n        protected readonly _claimsService: ClaimsService,\n    ) {\n        this._userInfoService = new UserInfoService(this._settings, this._metadataService);\n        this._tokenClient = new TokenClient(this._settings, this._metadataService);\n    }\n\n    public async validateSigninResponse(response: SigninResponse, state: SigninState, extraHeaders?: Record<string, ExtraHeader>): Promise<void> {\n        const logger = this._logger.create(\"validateSigninResponse\");\n\n        this._processSigninState(response, state);\n        logger.debug(\"state processed\");\n\n        await this._processCode(response, state, extraHeaders);\n        logger.debug(\"code processed\");\n\n        if (response.isOpenId) {\n            this._validateIdTokenAttributes(response);\n        }\n        logger.debug(\"tokens validated\");\n\n        await this._processClaims(response, state?.skipUserInfo, response.isOpenId);\n        logger.debug(\"claims processed\");\n    }\n\n    public async validateCredentialsResponse(response: SigninResponse, skipUserInfo: boolean): Promise<void> {\n        const logger = this._logger.create(\"validateCredentialsResponse\");\n        const shouldValidateSubClaim = response.isOpenId && !!response.id_token;\n\n        if (shouldValidateSubClaim) {\n            this._validateIdTokenAttributes(response);\n        }\n        logger.debug(\"tokens validated\");\n\n        await this._processClaims(response, skipUserInfo, shouldValidateSubClaim);\n        logger.debug(\"claims processed\");\n    }\n\n    public async validateRefreshResponse(response: SigninResponse, state: RefreshState): Promise<void> {\n        const logger = this._logger.create(\"validateRefreshResponse\");\n\n        response.userState = state.data;\n        // if there's no session_state on the response, copy over session_state from original request\n        response.session_state ??= state.session_state;\n        // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request\n        response.scope ??= state.scope;\n\n        // OpenID Connect Core 1.0 says that id_token is optional in refresh response:\n        // https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokenResponse\n        if (response.isOpenId && !!response.id_token) {\n            this._validateIdTokenAttributes(response, state.id_token);\n            logger.debug(\"ID Token validated\");\n        }\n\n        if (!response.id_token) {\n            // if there's no id_token on the response, copy over id_token from original request\n            response.id_token = state.id_token;\n            // and decoded part too\n            response.profile = state.profile;\n        }\n\n        const hasIdToken = response.isOpenId && !!response.id_token;\n        await this._processClaims(response, false, hasIdToken);\n        logger.debug(\"claims processed\");\n    }\n\n    public validateSignoutResponse(response: SignoutResponse, state: State): void {\n        const logger = this._logger.create(\"validateSignoutResponse\");\n        if (state.id !== response.state) {\n            logger.throw(new Error(\"State does not match\"));\n        }\n\n        // now that we know the state matches, take the stored data\n        // and set it into the response so callers can get their state\n        // this is important for both success & error outcomes\n        logger.debug(\"state validated\");\n        response.userState = state.data;\n\n        if (response.error) {\n            logger.warn(\"Response was error\", response.error);\n            throw new ErrorResponse(response);\n        }\n    }\n\n    protected _processSigninState(response: SigninResponse, state: SigninState): void {\n        const logger = this._logger.create(\"_processSigninState\");\n        if (state.id !== response.state) {\n            logger.throw(new Error(\"State does not match\"));\n        }\n\n        if (!state.client_id) {\n            logger.throw(new Error(\"No client_id on state\"));\n        }\n\n        if (!state.authority) {\n            logger.throw(new Error(\"No authority on state\"));\n        }\n\n        // ensure we're using the correct authority\n        if (this._settings.authority !== state.authority) {\n            logger.throw(new Error(\"authority mismatch on settings vs. signin state\"));\n        }\n        if (this._settings.client_id && this._settings.client_id !== state.client_id) {\n            logger.throw(new Error(\"client_id mismatch on settings vs. signin state\"));\n        }\n\n        // now that we know the state matches, take the stored data\n        // and set it into the response so callers can get their state\n        // this is important for both success & error outcomes\n        logger.debug(\"state validated\");\n        response.userState = state.data;\n        response.url_state = state.url_state;\n        // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request\n        response.scope ??= state.scope;\n\n        if (response.error) {\n            logger.warn(\"Response was error\", response.error);\n            throw new ErrorResponse(response);\n        }\n\n        if (state.code_verifier && !response.code) {\n            logger.throw(new Error(\"Expected code in response\"));\n        }\n\n    }\n\n    protected async _processClaims(response: SigninResponse, skipUserInfo = false, validateSub = true): Promise<void> {\n        const logger = this._logger.create(\"_processClaims\");\n        response.profile = this._claimsService.filterProtocolClaims(response.profile);\n\n        if (skipUserInfo || !this._settings.loadUserInfo || !response.access_token) {\n            logger.debug(\"not loading user info\");\n            return;\n        }\n\n        logger.debug(\"loading user info\");\n        const claims = await this._userInfoService.getClaims(response.access_token);\n        logger.debug(\"user info claims received from user info endpoint\");\n\n        if (validateSub && claims.sub !== response.profile.sub) {\n            logger.throw(new Error(\"subject from UserInfo response does not match subject in ID Token\"));\n        }\n\n        response.profile = this._claimsService.mergeClaims(response.profile, this._claimsService.filterProtocolClaims(claims as IdTokenClaims));\n        logger.debug(\"user info claims received, updated profile:\", response.profile);\n    }\n\n    protected async _processCode(response: SigninResponse, state: SigninState, extraHeaders?: Record<string, ExtraHeader>): Promise<void> {\n        const logger = this._logger.create(\"_processCode\");\n        if (response.code) {\n            logger.debug(\"Validating code\");\n            const tokenResponse = await this._tokenClient.exchangeCode({\n                client_id: state.client_id,\n                client_secret: state.client_secret,\n                code: response.code,\n                redirect_uri: state.redirect_uri,\n                code_verifier: state.code_verifier,\n                extraHeaders: extraHeaders,\n                ...state.extraTokenParams,\n            });\n            Object.assign(response, tokenResponse);\n        } else {\n            logger.debug(\"No code to process\");\n        }\n    }\n\n    protected _validateIdTokenAttributes(response: SigninResponse, existingToken?: string): void {\n        const logger = this._logger.create(\"_validateIdTokenAttributes\");\n\n        logger.debug(\"decoding ID Token JWT\");\n        const incoming = JwtUtils.decode(response.id_token ?? \"\");\n\n        if (!incoming.sub) {\n            logger.throw(new Error(\"ID Token is missing a subject claim\"));\n        }\n\n        if (existingToken) {\n            const existing = JwtUtils.decode(existingToken);\n            if (incoming.sub !== existing.sub) {\n                logger.throw(new Error(\"sub in id_token does not match current sub\"));\n            }\n            if (incoming.auth_time && incoming.auth_time !== existing.auth_time) {\n                logger.throw(new Error(\"auth_time in id_token does not match original auth_time\"));\n            }\n            if (incoming.azp && incoming.azp !== existing.azp) {\n                logger.throw(new Error(\"azp in id_token does not match original azp\"));\n            }\n            if (!incoming.azp && existing.azp) {\n                logger.throw(new Error(\"azp not in id_token, but present in original id_token\"));\n            }\n        }\n\n        response.profile = incoming as UserProfile;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, CryptoUtils, Timer } from \"./utils\";\nimport type { StateStore } from \"./StateStore\";\n\n/**\n * @public\n */\nexport class State {\n    public readonly id: string;\n    public readonly created: number;\n    public readonly request_type: string | undefined;\n    public readonly url_state: string | undefined;\n\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    public readonly data?: unknown;\n\n    public constructor(args: {\n        id?: string;\n        data?: unknown;\n        created?: number;\n        request_type?: string;\n        url_state?: string;\n    }) {\n        this.id = args.id || CryptoUtils.generateUUIDv4();\n        this.data = args.data;\n\n        if (args.created && args.created > 0) {\n            this.created = args.created;\n        }\n        else {\n            this.created = Timer.getEpochTime();\n        }\n        this.request_type = args.request_type;\n        this.url_state = args.url_state;\n    }\n\n    public toStorageString(): string {\n        new Logger(\"State\").create(\"toStorageString\");\n        return JSON.stringify({\n            id: this.id,\n            data: this.data,\n            created: this.created,\n            request_type: this.request_type,\n            url_state: this.url_state,\n        });\n    }\n\n    public static fromStorageString(storageString: string): Promise<State> {\n        Logger.createStatic(\"State\", \"fromStorageString\");\n        return Promise.resolve(new State(JSON.parse(storageString)));\n    }\n\n    public static async clearStaleState(storage: StateStore, age: number): Promise<void> {\n        const logger = Logger.createStatic(\"State\", \"clearStaleState\");\n        const cutoff = Timer.getEpochTime() - age;\n\n        const keys = await storage.getAllKeys();\n        logger.debug(\"got keys\", keys);\n\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const item = await storage.get(key);\n            let remove = false;\n\n            if (item) {\n                try {\n                    const state = await State.fromStorageString(item);\n\n                    logger.debug(\"got item from key:\", key, state.created);\n                    if (state.created <= cutoff) {\n                        remove = true;\n                    }\n                }\n                catch (err) {\n                    logger.error(\"Error parsing state for key:\", key, err);\n                    remove = true;\n                }\n            }\n            else {\n                logger.debug(\"no item in storage for key:\", key);\n                remove = true;\n            }\n\n            if (remove) {\n                logger.debug(\"removed item for key:\", key);\n                void storage.remove(key);\n            }\n        }\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, CryptoUtils } from \"./utils\";\nimport { State } from \"./State\";\n\n/** @public */\nexport interface SigninStateArgs {\n    id?: string;\n    data?: unknown;\n    created?: number;\n    request_type?: string;\n\n    code_verifier?: string;\n    code_challenge?: string;\n    authority: string;\n    client_id: string;\n    redirect_uri: string;\n    scope: string;\n    client_secret?: string;\n    extraTokenParams?: Record<string, unknown>;\n    response_mode?: \"query\" | \"fragment\";\n    skipUserInfo?: boolean;\n    url_state?: string;\n}\n\n/** @public */\nexport type SigninStateCreateArgs = Omit<SigninStateArgs, \"code_verifier\"> & {\n    code_verifier?: string | boolean;\n};\n\n/**\n * @public\n */\nexport class SigninState extends State {\n    // isCode\n    /** The same code_verifier that was used to obtain the authorization_code via PKCE. */\n    public readonly code_verifier: string | undefined;\n    /** Used to secure authorization code grants via Proof Key for Code Exchange (PKCE). */\n    public readonly code_challenge: string | undefined;\n\n    // to ensure state still matches settings\n    /** @see {@link OidcClientSettings.authority} */\n    public readonly authority: string;\n    /** @see {@link OidcClientSettings.client_id} */\n    public readonly client_id: string;\n    /** @see {@link OidcClientSettings.redirect_uri} */\n    public readonly redirect_uri: string;\n    /** @see {@link OidcClientSettings.scope} */\n    public readonly scope: string;\n    /** @see {@link OidcClientSettings.client_secret} */\n    public readonly client_secret: string | undefined;\n    /** @see {@link OidcClientSettings.extraTokenParams} */\n    public readonly extraTokenParams: Record<string, unknown> | undefined;\n    /** @see {@link OidcClientSettings.response_mode} */\n    public readonly response_mode: \"query\" | \"fragment\" | undefined;\n\n    public readonly skipUserInfo: boolean | undefined;\n\n    private constructor(args: SigninStateArgs) {\n        super(args);\n\n        this.code_verifier = args.code_verifier;\n        this.code_challenge = args.code_challenge;\n        this.authority = args.authority;\n        this.client_id = args.client_id;\n        this.redirect_uri = args.redirect_uri;\n        this.scope = args.scope;\n        this.client_secret = args.client_secret;\n        this.extraTokenParams = args.extraTokenParams;\n\n        this.response_mode = args.response_mode;\n        this.skipUserInfo = args.skipUserInfo;\n    }\n\n    public static async create(args: SigninStateCreateArgs): Promise<SigninState> {\n        const code_verifier = args.code_verifier === true ? CryptoUtils.generateCodeVerifier() : (args.code_verifier || undefined);\n        const code_challenge = code_verifier ? (await CryptoUtils.generateCodeChallenge(code_verifier)) : undefined;\n\n        return new SigninState({\n            ...args,\n            code_verifier,\n            code_challenge,\n        });\n    }\n\n    public toStorageString(): string {\n        new Logger(\"SigninState\").create(\"toStorageString\");\n        return JSON.stringify({\n            id: this.id,\n            data: this.data,\n            created: this.created,\n            request_type: this.request_type,\n            url_state: this.url_state,\n\n            code_verifier: this.code_verifier,\n            authority: this.authority,\n            client_id: this.client_id,\n            redirect_uri: this.redirect_uri,\n            scope: this.scope,\n            client_secret: this.client_secret,\n            extraTokenParams : this.extraTokenParams,\n            response_mode: this.response_mode,\n            skipUserInfo: this.skipUserInfo,\n        });\n    }\n\n    public static fromStorageString(storageString: string): Promise<SigninState> {\n        Logger.createStatic(\"SigninState\", \"fromStorageString\");\n        const data = JSON.parse(storageString);\n        return SigninState.create(data);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, URL_STATE_DELIMITER } from \"./utils\";\nimport { SigninState } from \"./SigninState\";\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n */\nexport interface SigninRequestCreateArgs {\n    // mandatory\n    url: string;\n    authority: string;\n    client_id: string;\n    redirect_uri: string;\n    response_type: string;\n    scope: string;\n\n    // optional\n    response_mode?: \"query\" | \"fragment\";\n    nonce?: string;\n    display?: string;\n    dpopJkt?: string;\n    prompt?: string;\n    max_age?: number;\n    ui_locales?: string;\n    id_token_hint?: string;\n    login_hint?: string;\n    acr_values?: string;\n\n    // other\n    resource?: string | string[];\n    request?: string;\n    request_uri?: string;\n    request_type?: string;\n    extraQueryParams?: Record<string, string | number | boolean>;\n\n    // special\n    extraTokenParams?: Record<string, unknown>;\n    client_secret?: string;\n    skipUserInfo?: boolean;\n    disablePKCE?: boolean;\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state_data?: unknown;\n    url_state?: string;\n    omitScopeWhenRequesting?: boolean;\n}\n\n/**\n * @public\n */\nexport class SigninRequest {\n    private static readonly _logger = new Logger(\"SigninRequest\");\n\n    public readonly url: string;\n    public readonly state: SigninState;\n\n    private constructor(args: {\n        url: string;\n        state: SigninState;\n    }) {\n        this.url = args.url;\n        this.state = args.state;\n    }\n\n    public static async create({\n        // mandatory\n        url, authority, client_id, redirect_uri, response_type, scope,\n        // optional\n        state_data, response_mode, request_type, client_secret, nonce, url_state,\n        resource,\n        skipUserInfo,\n        extraQueryParams,\n        extraTokenParams,\n        disablePKCE,\n        dpopJkt,\n        omitScopeWhenRequesting,\n        ...optionalParams\n    }: SigninRequestCreateArgs): Promise<SigninRequest> {\n        if (!url) {\n            this._logger.error(\"create: No url passed\");\n            throw new Error(\"url\");\n        }\n        if (!client_id) {\n            this._logger.error(\"create: No client_id passed\");\n            throw new Error(\"client_id\");\n        }\n        if (!redirect_uri) {\n            this._logger.error(\"create: No redirect_uri passed\");\n            throw new Error(\"redirect_uri\");\n        }\n        if (!response_type) {\n            this._logger.error(\"create: No response_type passed\");\n            throw new Error(\"response_type\");\n        }\n        if (!scope) {\n            this._logger.error(\"create: No scope passed\");\n            throw new Error(\"scope\");\n        }\n        if (!authority) {\n            this._logger.error(\"create: No authority passed\");\n            throw new Error(\"authority\");\n        }\n\n        const state = await SigninState.create({\n            data: state_data,\n            request_type,\n            url_state,\n            code_verifier: !disablePKCE,\n            client_id, authority, redirect_uri,\n            response_mode,\n            client_secret, scope, extraTokenParams,\n            skipUserInfo,\n        });\n\n        const parsedUrl = new URL(url);\n        parsedUrl.searchParams.append(\"client_id\", client_id);\n        parsedUrl.searchParams.append(\"redirect_uri\", redirect_uri);\n        parsedUrl.searchParams.append(\"response_type\", response_type);\n        if (!omitScopeWhenRequesting) {\n            parsedUrl.searchParams.append(\"scope\", scope);\n        }\n        if (nonce) {\n            parsedUrl.searchParams.append(\"nonce\", nonce);\n        }\n\n        if (dpopJkt) {\n            parsedUrl.searchParams.append(\"dpop_jkt\", dpopJkt);\n        }\n\n        let stateParam = state.id;\n        if (url_state) {\n            stateParam = `${stateParam}${URL_STATE_DELIMITER}${url_state}`;\n        }\n        parsedUrl.searchParams.append(\"state\", stateParam);\n        if (state.code_challenge) {\n            parsedUrl.searchParams.append(\"code_challenge\", state.code_challenge);\n            parsedUrl.searchParams.append(\"code_challenge_method\", \"S256\");\n        }\n\n        if (resource) {\n            // https://datatracker.ietf.org/doc/html/rfc8707\n            const resources = Array.isArray(resource) ? resource : [resource];\n            resources\n                .forEach(r => parsedUrl.searchParams.append(\"resource\", r));\n        }\n\n        for (const [key, value] of Object.entries({ response_mode, ...optionalParams, ...extraQueryParams })) {\n            if (value != null) {\n                parsedUrl.searchParams.append(key, value.toString());\n            }\n        }\n\n        return new SigninRequest({\n            url: parsedUrl.href,\n            state,\n        });\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Timer, URL_STATE_DELIMITER } from \"./utils\";\nimport type { UserProfile } from \"./User\";\n\nconst OidcScope = \"openid\";\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthResponse\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthError\n */\nexport class SigninResponse {\n    // props present in the initial callback response regardless of success\n    public readonly state: string | null;\n    /** @see {@link User.session_state} */\n    public session_state: string | null;\n\n    // error props\n    /** @see {@link ErrorResponse.error} */\n    public readonly error: string | null;\n    /** @see {@link ErrorResponse.error_description} */\n    public readonly error_description: string | null;\n    /** @see {@link ErrorResponse.error_uri} */\n    public readonly error_uri: string | null;\n\n    // success props\n    public readonly code: string | null;\n\n    // props set after validation\n    /** @see {@link User.id_token} */\n    public id_token?: string;\n    /** @see {@link User.access_token} */\n    public access_token = \"\";\n    /** @see {@link User.token_type} */\n    public token_type = \"\";\n    /** @see {@link User.refresh_token} */\n    public refresh_token?: string;\n    /** @see {@link User.scope} */\n    public scope?: string;\n    /** @see {@link User.expires_at} */\n    public expires_at?: number;\n\n    /** custom state data set during the initial signin request */\n    public userState: unknown;\n    public url_state?: string;\n\n    /** @see {@link User.profile} */\n    public profile: UserProfile = {} as UserProfile;\n\n    public constructor(params: URLSearchParams) {\n        this.state = params.get(\"state\");\n        this.session_state = params.get(\"session_state\");\n        if (this.state) {\n            const splitState = decodeURIComponent(this.state).split(URL_STATE_DELIMITER);\n            this.state = splitState[0];\n            if (splitState.length > 1) {\n                this.url_state = splitState.slice(1).join(URL_STATE_DELIMITER);\n            }\n        }\n\n        this.error = params.get(\"error\");\n        this.error_description = params.get(\"error_description\");\n        this.error_uri = params.get(\"error_uri\");\n\n        this.code = params.get(\"code\");\n    }\n\n    public get expires_in(): number | undefined {\n        if (this.expires_at === undefined) {\n            return undefined;\n        }\n        return this.expires_at - Timer.getEpochTime();\n    }\n    public set expires_in(value: number | undefined) {\n        // spec expects a number, but normalize here just in case\n        if (typeof value === \"string\") value = Number(value);\n        if (value !== undefined && value >= 0) {\n            this.expires_at = Math.floor(value) + Timer.getEpochTime();\n        }\n    }\n\n    public get isOpenId(): boolean {\n        return this.scope?.split(\" \").includes(OidcScope) || !!this.id_token;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, URL_STATE_DELIMITER } from \"./utils\";\nimport { State } from \"./State\";\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-rpinitiated-1_0.html#RPLogout\n */\nexport interface SignoutRequestArgs {\n    // mandatory\n    url: string;\n\n    // optional\n    id_token_hint?: string;\n    client_id?: string;\n    post_logout_redirect_uri?: string;\n    extraQueryParams?: Record<string, string | number | boolean>;\n\n    // special\n    request_type?: string;\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state_data?: unknown;\n    url_state?: string;\n}\n\n/**\n * @public\n */\nexport class SignoutRequest {\n    private readonly _logger = new Logger(\"SignoutRequest\");\n\n    public readonly url: string;\n    public readonly state?: State;\n\n    public constructor({\n        url,\n        state_data, id_token_hint, post_logout_redirect_uri, extraQueryParams, request_type, client_id, url_state,\n    }: SignoutRequestArgs) {\n        if (!url) {\n            this._logger.error(\"ctor: No url passed\");\n            throw new Error(\"url\");\n        }\n\n        const parsedUrl = new URL(url);\n        if (id_token_hint) {\n            parsedUrl.searchParams.append(\"id_token_hint\", id_token_hint);\n        }\n        if (client_id) {\n            parsedUrl.searchParams.append(\"client_id\", client_id);\n        }\n\n        if (post_logout_redirect_uri) {\n            parsedUrl.searchParams.append(\"post_logout_redirect_uri\", post_logout_redirect_uri);\n\n            // Add state if either data needs to be stored, or url_state set for an intermediate proxy\n            if (state_data || url_state) {\n                this.state = new State({ data: state_data, request_type, url_state });\n\n                let stateParam = this.state.id;\n                if (url_state) {\n                    stateParam = `${stateParam}${URL_STATE_DELIMITER}${url_state}`;\n                }\n                parsedUrl.searchParams.append(\"state\", stateParam);\n            }\n        }\n\n        for (const [key, value] of Object.entries({ ...extraQueryParams })) {\n            if (value != null) {\n                parsedUrl.searchParams.append(key, value.toString());\n            }\n        }\n\n        this.url = parsedUrl.href;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { URL_STATE_DELIMITER } from \"./utils\";\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthError\n */\nexport class SignoutResponse {\n    public readonly state: string | null;\n\n    // error props\n    /** @see {@link ErrorResponse.error} */\n    public error: string | null;\n    /** @see {@link ErrorResponse.error_description} */\n    public error_description: string | null;\n    /** @see {@link ErrorResponse.error_uri} */\n    public error_uri: string | null;\n\n    /** custom state data set during the initial signin request */\n    public userState: unknown;\n    public url_state?: string;\n\n    public constructor(params: URLSearchParams) {\n        this.state = params.get(\"state\");\n        if (this.state) {\n            const splitState = decodeURIComponent(this.state).split(URL_STATE_DELIMITER);\n            this.state = splitState[0];\n            if (splitState.length > 1) {\n                this.url_state = splitState.slice(1).join(URL_STATE_DELIMITER);\n            }\n        }\n\n        this.error = params.get(\"error\");\n        this.error_description = params.get(\"error_description\");\n        this.error_uri = params.get(\"error_uri\");\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport type { JwtClaims } from \"./Claims\";\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport type { UserProfile } from \"./User\";\nimport { Logger } from \"./utils\";\n\n/**\n * Protocol claims that could be removed by default from profile.\n * Derived from the following sets of claims:\n * - {@link https://datatracker.ietf.org/doc/html/rfc7519.html#section-4.1}\n * - {@link https://openid.net/specs/openid-connect-core-1_0.html#IDToken}\n * - {@link https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken}\n *\n * @internal\n */\nconst DefaultProtocolClaims = [\n    \"nbf\",\n    \"jti\",\n    \"auth_time\",\n    \"nonce\",\n    \"acr\",\n    \"amr\",\n    \"azp\",\n    \"at_hash\", // https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken\n] as const;\n\n/**\n * Protocol claims that should never be removed from profile.\n * \"sub\" is needed internally and others should remain required as per the OIDC specs.\n *\n * @internal\n */\nconst InternalRequiredProtocolClaims = [\"sub\", \"iss\", \"aud\", \"exp\", \"iat\"];\n\n/**\n * @internal\n */\nexport class ClaimsService {\n    protected readonly _logger = new Logger(\"ClaimsService\");\n    public constructor(\n        protected readonly _settings: OidcClientSettingsStore,\n    ) {}\n\n    public filterProtocolClaims(claims: UserProfile): UserProfile {\n        const result = { ...claims };\n\n        if (this._settings.filterProtocolClaims) {\n            let protocolClaims;\n            if (Array.isArray(this._settings.filterProtocolClaims)) {\n                protocolClaims = this._settings.filterProtocolClaims;\n            } else {\n                protocolClaims = DefaultProtocolClaims;\n            }\n\n            for (const claim of protocolClaims) {\n                if (!InternalRequiredProtocolClaims.includes(claim)) {\n                    delete result[claim];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public mergeClaims(claims1: JwtClaims, claims2: JwtClaims): UserProfile;\n    public mergeClaims(claims1: UserProfile, claims2: JwtClaims): UserProfile {\n        const result = { ...claims1 };\n        for (const [claim, values] of Object.entries(claims2)) {\n            if (result[claim] !== values) {\n                if (Array.isArray(result[claim]) || Array.isArray(values)) {\n                    if (this._settings.mergeClaimsStrategy.array == \"replace\") {\n                        result[claim] = values;\n                    } else {\n                        const mergedValues = Array.isArray(result[claim]) ? result[claim] as unknown[] : [result[claim]];\n                        for (const value of Array.isArray(values) ? values : [values]) {\n                            if (!mergedValues.includes(value)) {\n                                mergedValues.push(value);\n                            }\n                        }\n                        result[claim] = mergedValues;\n                    }\n                } else if (typeof result[claim] === \"object\" && typeof values === \"object\") {\n                    result[claim] = this.mergeClaims(result[claim] as JwtClaims, values as JwtClaims);\n                } else {\n                    result[claim] = values;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n","/**\n * @public\n */\nexport interface DPoPStore {\n    set(key: string, value: DPoPState): Promise<void>;\n    get(key: string): Promise<DPoPState>;\n    remove(key: string): Promise<DPoPState>;\n    getAllKeys(): Promise<string[]>;\n}\n\n/**\n * @public\n */\nexport class DPoPState {\n    public constructor(\n        public readonly keys: CryptoKeyPair,\n        public nonce?: string,\n    ) { }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { CryptoUtils, Logger, UrlUtils } from \"./utils\";\nimport { ErrorResponse } from \"./errors\";\nimport { type ExtraHeader, type OidcClientSettings, OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport { ResponseValidator } from \"./ResponseValidator\";\nimport { MetadataService } from \"./MetadataService\";\nimport type { RefreshState } from \"./RefreshState\";\nimport { SigninRequest, type SigninRequestCreateArgs } from \"./SigninRequest\";\nimport { SigninResponse } from \"./SigninResponse\";\nimport { SignoutRequest, type SignoutRequestArgs } from \"./SignoutRequest\";\nimport { SignoutResponse } from \"./SignoutResponse\";\nimport { SigninState } from \"./SigninState\";\nimport { State } from \"./State\";\nimport { TokenClient } from \"./TokenClient\";\nimport { ClaimsService } from \"./ClaimsService\";\nimport { DPoPState, type DPoPStore } from \"./DPoPStore\";\nimport { ErrorDPoPNonce } from \"./errors/ErrorDPoPNonce\";\n\n/**\n * @public\n */\nexport interface CreateSigninRequestArgs\n    extends Omit<SigninRequestCreateArgs, \"url\" | \"authority\" | \"client_id\" | \"redirect_uri\" | \"response_type\" | \"scope\" | \"state_data\"> {\n    redirect_uri?: string;\n    response_type?: string;\n    scope?: string;\n    dpopJkt?: string;\n\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state?: unknown;\n}\n\n/**\n * @public\n */\nexport interface UseRefreshTokenArgs {\n    redirect_uri?: string;\n    resource?: string | string[];\n    extraTokenParams?: Record<string, unknown>;\n    timeoutInSeconds?: number;\n\n    state: RefreshState;\n\n    extraHeaders?: Record<string, ExtraHeader>;\n}\n\n/**\n * @public\n */\nexport type CreateSignoutRequestArgs = Omit<SignoutRequestArgs, \"url\" | \"state_data\"> & {\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state?: unknown;\n};\n\n/**\n * @public\n */\nexport type ProcessResourceOwnerPasswordCredentialsArgs = {\n    username: string;\n    password: string;\n    skipUserInfo?: boolean;\n    extraTokenParams?: Record<string, unknown>;\n};\n\n/**\n * Provides the raw OIDC/OAuth2 protocol support for the authorization endpoint and the end session endpoint in the\n * authorization server. It provides a bare-bones protocol implementation and is used by the UserManager class.\n * Only use this class if you simply want protocol support without the additional management features of the\n * UserManager class.\n *\n * @public\n */\nexport class OidcClient {\n    public readonly settings: OidcClientSettingsStore;\n    protected readonly _logger = new Logger(\"OidcClient\");\n\n    public readonly metadataService: MetadataService;\n    protected readonly _claimsService: ClaimsService;\n    protected readonly _validator: ResponseValidator;\n    protected readonly _tokenClient: TokenClient;\n\n    public constructor(settings: OidcClientSettings);\n    public constructor(settings: OidcClientSettingsStore, metadataService: MetadataService);\n    public constructor(settings: OidcClientSettings | OidcClientSettingsStore, metadataService?: MetadataService) {\n        this.settings = settings instanceof OidcClientSettingsStore ? settings : new OidcClientSettingsStore(settings);\n\n        this.metadataService = metadataService ?? new MetadataService(this.settings);\n        this._claimsService = new ClaimsService(this.settings);\n        this._validator = new ResponseValidator(this.settings, this.metadataService, this._claimsService);\n        this._tokenClient = new TokenClient(this.settings, this.metadataService);\n    }\n\n    public async createSigninRequest({\n        state,\n        request,\n        request_uri,\n        request_type,\n        id_token_hint,\n        login_hint,\n        skipUserInfo,\n        nonce,\n        url_state,\n        response_type = this.settings.response_type,\n        scope = this.settings.scope,\n        redirect_uri = this.settings.redirect_uri,\n        prompt = this.settings.prompt,\n        display = this.settings.display,\n        max_age = this.settings.max_age,\n        ui_locales = this.settings.ui_locales,\n        acr_values = this.settings.acr_values,\n        resource = this.settings.resource,\n        response_mode = this.settings.response_mode,\n        extraQueryParams = this.settings.extraQueryParams,\n        extraTokenParams = this.settings.extraTokenParams,\n        dpopJkt,\n        omitScopeWhenRequesting = this.settings.omitScopeWhenRequesting,\n    }: CreateSigninRequestArgs): Promise<SigninRequest> {\n        const logger = this._logger.create(\"createSigninRequest\");\n\n        if (response_type !== \"code\") {\n            throw new Error(\"Only the Authorization Code flow (with PKCE) is supported\");\n        }\n\n        const url = await this.metadataService.getAuthorizationEndpoint();\n        logger.debug(\"Received authorization endpoint\", url);\n\n        const signinRequest = await SigninRequest.create({\n            url,\n            authority: this.settings.authority,\n            client_id: this.settings.client_id,\n            redirect_uri,\n            response_type,\n            scope,\n            state_data: state,\n            url_state,\n            prompt, display, max_age, ui_locales, id_token_hint, login_hint, acr_values, dpopJkt,\n            resource, request, request_uri, extraQueryParams, extraTokenParams, request_type, response_mode,\n            client_secret: this.settings.client_secret,\n            skipUserInfo,\n            nonce,\n            disablePKCE: this.settings.disablePKCE,\n            omitScopeWhenRequesting,\n        });\n\n        // house cleaning\n        await this.clearStaleState();\n\n        const signinState = signinRequest.state;\n        await this.settings.stateStore.set(signinState.id, signinState.toStorageString());\n        return signinRequest;\n    }\n\n    public async readSigninResponseState(url: string, removeState = false): Promise<{ state: SigninState; response: SigninResponse }> {\n        const logger = this._logger.create(\"readSigninResponseState\");\n\n        const response = new SigninResponse(UrlUtils.readParams(url, this.settings.response_mode));\n        if (!response.state) {\n            logger.throw(new Error(\"No state in response\"));\n            // need to throw within this function's body for type narrowing to work\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n        if (!storedStateString) {\n            logger.throw(new Error(\"No matching state found in storage\"));\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        const state = await SigninState.fromStorageString(storedStateString);\n        return { state, response };\n    }\n\n    public async processSigninResponse(url: string, extraHeaders?: Record<string, ExtraHeader>, removeState = true): Promise<SigninResponse> {\n        const logger = this._logger.create(\"processSigninResponse\");\n\n        const { state, response } = await this.readSigninResponseState(url, removeState);\n        logger.debug(\"received state from storage; validating response\");\n\n        if (this.settings.dpop && this.settings.dpop.store) {\n            const dpopProof = await this.getDpopProof(this.settings.dpop.store);\n            extraHeaders = { ...extraHeaders, \"DPoP\": dpopProof };\n        }\n\n        /**\n         * The DPoP spec describes a method for Authorization Servers to supply a nonce value\n         * in order to limit the lifetime of a given DPoP proof.\n         * See https://datatracker.ietf.org/doc/html/rfc9449#name-authorization-server-provid\n         * This involves the AS returning a 400 bad request with a DPoP-Nonce header containing\n         * the nonce value. The client must then retry the request with a recomputed DPoP proof\n         * containing the supplied nonce value.\n         */\n        try {\n            await this._validator.validateSigninResponse(response, state, extraHeaders);\n        }\n        catch (err) {\n            if (err instanceof ErrorDPoPNonce && this.settings.dpop) {\n                const dpopProof = await this.getDpopProof(this.settings.dpop.store, err.nonce);\n                extraHeaders![\"DPoP\"] = dpopProof;\n                await this._validator.validateSigninResponse(response, state, extraHeaders);\n            } else {\n                throw err;\n            }\n        }\n\n        return response;\n    }\n\n    async getDpopProof(dpopStore: DPoPStore, nonce?: string): Promise<string> {\n        let keyPair: CryptoKeyPair;\n        let dpopState: DPoPState;\n\n        if (!(await dpopStore.getAllKeys()).includes(this.settings.client_id)) {\n            keyPair = await CryptoUtils.generateDPoPKeys();\n            dpopState = new DPoPState(keyPair, nonce);\n            await dpopStore.set(this.settings.client_id, dpopState);\n        } else {\n            dpopState = await dpopStore.get(this.settings.client_id);\n\n            // if the server supplied nonce has changed since the last request, update the nonce\n            if (dpopState.nonce !== nonce && nonce) {\n                dpopState.nonce = nonce;\n                await dpopStore.set(this.settings.client_id, dpopState);\n            }\n        }\n\n        return await CryptoUtils.generateDPoPProof({\n            url: await this.metadataService.getTokenEndpoint(false),\n            httpMethod: \"POST\",\n            keyPair: dpopState.keys,\n            nonce: dpopState.nonce,\n        });\n    }\n\n    public async processResourceOwnerPasswordCredentials({\n        username,\n        password,\n        skipUserInfo = false,\n        extraTokenParams = {},\n    }: ProcessResourceOwnerPasswordCredentialsArgs): Promise<SigninResponse> {\n        const tokenResponse: Record<string, unknown> = await this._tokenClient.exchangeCredentials({ username, password, ...extraTokenParams });\n        const signinResponse: SigninResponse = new SigninResponse(new URLSearchParams());\n        Object.assign(signinResponse, tokenResponse);\n        await this._validator.validateCredentialsResponse(signinResponse, skipUserInfo);\n        return signinResponse;\n    }\n\n    public async useRefreshToken({\n        state,\n        redirect_uri,\n        resource,\n        timeoutInSeconds,\n        extraHeaders,\n        extraTokenParams,\n    }: UseRefreshTokenArgs): Promise<SigninResponse> {\n        const logger = this._logger.create(\"useRefreshToken\");\n\n        // https://github.com/authts/oidc-client-ts/issues/695\n        // In some cases (e.g. AzureAD), not all granted scopes are allowed on token refresh requests.\n        // Therefore, we filter all granted scopes by a list of allowable scopes.\n        let scope;\n        if (this.settings.refreshTokenAllowedScope === undefined) {\n            scope = state.scope;\n        } else {\n            const allowableScopes = this.settings.refreshTokenAllowedScope.split(\" \");\n            const providedScopes = state.scope?.split(\" \") || [];\n\n            scope = providedScopes.filter(s => allowableScopes.includes(s)).join(\" \");\n        }\n\n        if (this.settings.dpop && this.settings.dpop.store) {\n            const dpopProof = await this.getDpopProof(this.settings.dpop.store);\n            extraHeaders = { ...extraHeaders, \"DPoP\": dpopProof };\n        }\n\n        /**\n         * The DPoP spec describes a method for Authorization Servers to supply a nonce value\n         * in order to limit the lifetime of a given DPoP proof.\n         * See https://datatracker.ietf.org/doc/html/rfc9449#name-authorization-server-provid\n         * This involves the AS returning a 400 bad request with a DPoP-Nonce header containing\n         * the nonce value. The client must then retry the request with a recomputed DPoP proof\n         * containing the supplied nonce value.\n         */\n        let result;\n        try {\n            result = await this._tokenClient.exchangeRefreshToken({\n                refresh_token: state.refresh_token,\n                // provide the (possible filtered) scope list\n                scope,\n                redirect_uri,\n                resource,\n                timeoutInSeconds,\n                extraHeaders,\n                ...extraTokenParams,\n            });\n        } catch (err) {\n            if (err instanceof ErrorDPoPNonce && this.settings.dpop) {\n                extraHeaders![\"DPoP\"] = await this.getDpopProof(this.settings.dpop.store, err.nonce);\n                result = await this._tokenClient.exchangeRefreshToken({\n                    refresh_token: state.refresh_token,\n                    // provide the (possible filtered) scope list\n                    scope,\n                    redirect_uri,\n                    resource,\n                    timeoutInSeconds,\n                    extraHeaders,\n                    ...extraTokenParams,\n                });\n            } else {\n                throw err;\n            }\n        }\n\n        const response = new SigninResponse(new URLSearchParams());\n        Object.assign(response, result);\n        logger.debug(\"validating response\", response);\n        await this._validator.validateRefreshResponse(response, {\n            ...state,\n            // override the scope in the state handed over to the validator\n            // so it can set the granted scope to the requested scope in case none is included in the response\n            scope,\n        });\n        return response;\n    }\n\n    public async createSignoutRequest({\n        state,\n        id_token_hint,\n        client_id,\n        request_type,\n        url_state,\n        post_logout_redirect_uri = this.settings.post_logout_redirect_uri,\n        extraQueryParams = this.settings.extraQueryParams,\n    }: CreateSignoutRequestArgs = {}): Promise<SignoutRequest> {\n        const logger = this._logger.create(\"createSignoutRequest\");\n\n        const url = await this.metadataService.getEndSessionEndpoint();\n        if (!url) {\n            logger.throw(new Error(\"No end session endpoint\"));\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        logger.debug(\"Received end session endpoint\", url);\n\n        // specify the client identifier when post_logout_redirect_uri is used but id_token_hint is not\n        if (!client_id && post_logout_redirect_uri && !id_token_hint) {\n            client_id = this.settings.client_id;\n        }\n\n        const request = new SignoutRequest({\n            url,\n            id_token_hint,\n            client_id,\n            post_logout_redirect_uri,\n            state_data: state,\n            extraQueryParams,\n            request_type,\n            url_state,\n        });\n\n        // house cleaning\n        await this.clearStaleState();\n\n        const signoutState = request.state;\n        if (signoutState) {\n            logger.debug(\"Signout request has state to persist\");\n            await this.settings.stateStore.set(signoutState.id, signoutState.toStorageString());\n        }\n\n        return request;\n    }\n\n    public async readSignoutResponseState(url: string, removeState = false): Promise<{ state: State | undefined; response: SignoutResponse }> {\n        const logger = this._logger.create(\"readSignoutResponseState\");\n\n        const response = new SignoutResponse(UrlUtils.readParams(url, this.settings.response_mode));\n        if (!response.state) {\n            logger.debug(\"No state in response\");\n\n            if (response.error) {\n                logger.warn(\"Response was error:\", response.error);\n                throw new ErrorResponse(response);\n            }\n\n            return { state: undefined, response };\n        }\n\n        const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n        if (!storedStateString) {\n            logger.throw(new Error(\"No matching state found in storage\"));\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        const state = await State.fromStorageString(storedStateString);\n        return { state, response };\n    }\n\n    public async processSignoutResponse(url: string): Promise<SignoutResponse> {\n        const logger = this._logger.create(\"processSignoutResponse\");\n\n        const { state, response } = await this.readSignoutResponseState(url, true);\n        if (state) {\n            logger.debug(\"Received state from storage; validating response\");\n            this._validator.validateSignoutResponse(response, state);\n        } else {\n            logger.debug(\"No state from storage; skipping response validation\");\n        }\n\n        return response;\n    }\n\n    public clearStaleState(): Promise<void> {\n        this._logger.create(\"clearStaleState\");\n        return State.clearStaleState(this.settings.stateStore, this.settings.staleStateAgeInSeconds);\n    }\n\n    public async revokeToken(token: string, type?: \"access_token\" | \"refresh_token\"): Promise<void> {\n        this._logger.create(\"revokeToken\");\n        return await this._tokenClient.revoke({\n            token,\n            token_type_hint: type,\n        });\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { CheckSessionIFrame } from \"./CheckSessionIFrame\";\nimport type { UserManager } from \"./UserManager\";\nimport type { User } from \"./User\";\n\n/**\n * @public\n */\nexport class SessionMonitor {\n    private readonly _logger = new Logger(\"SessionMonitor\");\n\n    private _sub: string | undefined;\n    private _checkSessionIFrame?: CheckSessionIFrame;\n\n    public constructor(private readonly _userManager: UserManager) {\n        if (!_userManager) {\n            this._logger.throw(new Error(\"No user manager passed\"));\n        }\n\n        this._userManager.events.addUserLoaded(this._start);\n        this._userManager.events.addUserUnloaded(this._stop);\n\n        this._init().catch((err: unknown) => {\n            // catch to suppress errors since we're in a ctor\n            this._logger.error(err);\n        });\n    }\n\n    protected async _init(): Promise<void> {\n        this._logger.create(\"_init\");\n        const user = await this._userManager.getUser();\n        // doing this manually here since calling getUser\n        // doesn't trigger load event.\n        if (user) {\n            void this._start(user);\n        }\n        else if (this._userManager.settings.monitorAnonymousSession) {\n            const session = await this._userManager.querySessionStatus();\n            if (session) {\n                const tmpUser = {\n                    session_state: session.session_state,\n                    profile: session.sub ? {\n                        sub: session.sub,\n                    } : null,\n                };\n                void this._start(tmpUser);\n            }\n        }\n    }\n\n    protected _start = async (\n        user: User | {\n            session_state: string;\n            profile: { sub: string } | null;\n        },\n    ): Promise<void> => {\n        const session_state = user.session_state;\n        if (!session_state) {\n            return;\n        }\n        const logger = this._logger.create(\"_start\");\n\n        if (user.profile) {\n            this._sub = user.profile.sub;\n            logger.debug(\"session_state\", session_state, \", sub\", this._sub);\n        }\n        else {\n            this._sub = undefined;\n            logger.debug(\"session_state\", session_state, \", anonymous user\");\n        }\n\n        if (this._checkSessionIFrame) {\n            this._checkSessionIFrame.start(session_state);\n            return;\n        }\n\n        try {\n            const url = await this._userManager.metadataService.getCheckSessionIframe();\n            if (url) {\n                logger.debug(\"initializing check session iframe\");\n\n                const client_id = this._userManager.settings.client_id;\n                const intervalInSeconds = this._userManager.settings.checkSessionIntervalInSeconds;\n                const stopOnError = this._userManager.settings.stopCheckSessionOnError;\n\n                const checkSessionIFrame = new CheckSessionIFrame(this._callback, client_id, url, intervalInSeconds, stopOnError);\n                await checkSessionIFrame.load();\n                this._checkSessionIFrame = checkSessionIFrame;\n                checkSessionIFrame.start(session_state);\n            }\n            else {\n                logger.warn(\"no check session iframe found in the metadata\");\n            }\n        }\n        catch (err) {\n            // catch to suppress errors since we're in non-promise callback\n            logger.error(\"Error from getCheckSessionIframe:\", err instanceof Error ? err.message : err);\n        }\n    };\n\n    protected _stop = (): void => {\n        const logger = this._logger.create(\"_stop\");\n        this._sub = undefined;\n\n        if (this._checkSessionIFrame) {\n            this._checkSessionIFrame.stop();\n        }\n\n        if (this._userManager.settings.monitorAnonymousSession) {\n            // using a timer to delay re-initialization to avoid race conditions during signout\n            // TODO rewrite to use promise correctly\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            const timerHandle = setInterval(async () => {\n                clearInterval(timerHandle);\n\n                try {\n                    const session = await this._userManager.querySessionStatus();\n                    if (session) {\n                        const tmpUser = {\n                            session_state: session.session_state,\n                            profile: session.sub ? {\n                                sub: session.sub,\n                            } : null,\n                        };\n                        void this._start(tmpUser);\n                    }\n                }\n                catch (err) {\n                    // catch to suppress errors since we're in a callback\n                    logger.error(\"error from querySessionStatus\", err instanceof Error ? err.message : err);\n                }\n            }, 1000);\n        }\n    };\n\n    protected _callback = async (): Promise<void> => {\n        const logger = this._logger.create(\"_callback\");\n        try {\n            const session = await this._userManager.querySessionStatus();\n            let raiseEvent = true;\n\n            if (session && this._checkSessionIFrame) {\n                if (session.sub === this._sub) {\n                    raiseEvent = false;\n                    this._checkSessionIFrame.start(session.session_state);\n\n                    logger.debug(\"same sub still logged in at OP, session state has changed, restarting check session iframe; session_state\", session.session_state);\n                    await this._userManager.events._raiseUserSessionChanged();\n                }\n                else {\n                    logger.debug(\"different subject signed into OP\", session.sub);\n                }\n            }\n            else {\n                logger.debug(\"subject no longer signed into OP\");\n            }\n\n            if (raiseEvent) {\n                if (this._sub) {\n                    await this._userManager.events._raiseUserSignedOut();\n                }\n                else {\n                    await this._userManager.events._raiseUserSignedIn();\n                }\n            } else {\n                logger.debug(\"no change in session detected, no event to raise\");\n            }\n        }\n        catch (err) {\n            if (this._sub) {\n                logger.debug(\"Error calling queryCurrentSigninSession; raising signed out event\", err);\n                await this._userManager.events._raiseUserSignedOut();\n            }\n        }\n    };\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Timer } from \"./utils\";\nimport type { IdTokenClaims } from \"./Claims\";\n\n/**\n * Holds claims represented by a combination of the `id_token` and the user info endpoint.\n *\n * @public\n */\nexport type UserProfile = IdTokenClaims;\n\n/**\n * @public\n */\nexport class User {\n    /**\n     * A JSON Web Token (JWT). Only provided if `openid` scope was requested.\n     * The application can access the data decoded by using the `profile` property.\n     */\n    public id_token?: string;\n\n    /** The session state value returned from the OIDC provider. */\n    public session_state: string | null;\n\n    /**\n     * The requested access token returned from the OIDC provider. The application can use this token to\n     * authenticate itself to the secured resource.\n     */\n    public access_token: string;\n\n    /**\n     * An OAuth 2.0 refresh token. The app can use this token to acquire additional access tokens after the\n     * current access token expires. Refresh tokens are long-lived and can be used to maintain access to resources\n     * for extended periods of time.\n     */\n    public refresh_token?: string;\n\n    /** Typically \"Bearer\" */\n    public token_type: string;\n\n    /** The scopes that the requested access token is valid for. */\n    public scope?: string;\n\n    /** The claims represented by a combination of the `id_token` and the user info endpoint. */\n    public profile: UserProfile;\n\n    /** The expires at returned from the OIDC provider. */\n    public expires_at?: number;\n\n    /** custom state data set during the initial signin request */\n    public readonly state: unknown;\n    public readonly url_state?: string;\n\n    public constructor(args: {\n        id_token?: string;\n        session_state?: string | null;\n        access_token: string;\n        refresh_token?: string;\n        token_type: string;\n        scope?: string;\n        profile: UserProfile;\n        expires_at?: number;\n        userState?: unknown;\n        url_state?: string;\n    }) {\n        this.id_token = args.id_token;\n        this.session_state = args.session_state ?? null;\n        this.access_token = args.access_token;\n        this.refresh_token = args.refresh_token;\n\n        this.token_type = args.token_type;\n        this.scope = args.scope;\n        this.profile = args.profile;\n        this.expires_at = args.expires_at;\n        this.state = args.userState;\n        this.url_state = args.url_state;\n    }\n\n    /** Computed number of seconds the access token has remaining. */\n    public get expires_in(): number | undefined {\n        if (this.expires_at === undefined) {\n            return undefined;\n        }\n        return this.expires_at - Timer.getEpochTime();\n    }\n\n    public set expires_in(value: number | undefined) {\n        if (value !== undefined) {\n            this.expires_at = Math.floor(value) + Timer.getEpochTime();\n        }\n    }\n\n    /** Computed value indicating if the access token is expired. */\n    public get expired(): boolean | undefined {\n        const expires_in = this.expires_in;\n        if (expires_in === undefined) {\n            return undefined;\n        }\n        return expires_in <= 0;\n    }\n\n    /** Array representing the parsed values from the `scope`. */\n    public get scopes(): string[] {\n        return this.scope?.split(\" \") ?? [];\n    }\n\n    public toStorageString(): string {\n        new Logger(\"User\").create(\"toStorageString\");\n        return JSON.stringify({\n            id_token: this.id_token,\n            session_state: this.session_state,\n            access_token: this.access_token,\n            refresh_token: this.refresh_token,\n            token_type: this.token_type,\n            scope: this.scope,\n            profile: this.profile,\n            expires_at: this.expires_at,\n        });\n    }\n\n    public static fromStorageString(storageString: string): User {\n        Logger.createStatic(\"User\", \"fromStorageString\");\n        return new User(JSON.parse(storageString));\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Event, Logger, UrlUtils } from \"../utils\";\nimport type { IWindow, NavigateParams, NavigateResponse } from \"./IWindow\";\n\nconst messageSource = \"oidc-client\";\n\ninterface MessageData {\n    source: string;\n    url: string;\n    keepOpen: boolean;\n}\n\n/**\n * Window implementation which resolves via communication from a child window\n * via the `Window.postMessage()` interface.\n *\n * @internal\n */\nexport abstract class AbstractChildWindow implements IWindow {\n    protected abstract readonly _logger: Logger;\n    protected readonly _abort = new Event<[reason: Error]>(\"Window navigation aborted\");\n    protected readonly _disposeHandlers = new Set<() => void>();\n\n    protected _window: WindowProxy | null = null;\n\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\n        const logger = this._logger.create(\"navigate\");\n        if (!this._window) {\n            throw new Error(\"Attempted to navigate on a disposed window\");\n        }\n\n        logger.debug(\"setting URL in window\");\n        this._window.location.replace(params.url);\n\n        const { url, keepOpen } = await new Promise<MessageData>((resolve, reject) => {\n            const listener = (e: MessageEvent) => {\n                const data: MessageData | undefined = e.data;\n                const origin = params.scriptOrigin ?? window.location.origin;\n                if (e.origin !== origin || data?.source !== messageSource) {\n                    // silently discard events not intended for us\n                    return;\n                }\n                try {\n                    const state = UrlUtils.readParams(data.url, params.response_mode).get(\"state\");\n                    if (!state) {\n                        logger.warn(\"no state found in response url\");\n                    }\n                    if (e.source !== this._window && state !== params.state) {\n                        // MessageEvent source is a relatively modern feature, we can't rely on it\n                        // so we also inspect the payload for a matching state key as an alternative\n                        return;\n                    }\n                }\n                catch {\n                    this._dispose();\n                    reject(new Error(\"Invalid response from window\"));\n                }\n                resolve(data);\n            };\n            window.addEventListener(\"message\", listener, false);\n            this._disposeHandlers.add(() => window.removeEventListener(\"message\", listener, false));\n            const channel = new BroadcastChannel(`oidc-client-popup-${params.state}`);\n            channel.addEventListener(\"message\", listener, false);\n            this._disposeHandlers.add(() => channel.close());\n            this._disposeHandlers.add(this._abort.addHandler((reason) => {\n                this._dispose();\n                reject(reason);\n            }));\n        });\n        logger.debug(\"got response from window\");\n        this._dispose();\n\n        if (!keepOpen) {\n            this.close();\n        }\n\n        return { url };\n    }\n\n    public abstract close(): void;\n\n    private _dispose(): void {\n        this._logger.create(\"_dispose\");\n\n        for (const dispose of this._disposeHandlers) {\n            dispose();\n        }\n        this._disposeHandlers.clear();\n    }\n\n    protected static _notifyParent(parent: Window | null, url: string, keepOpen = false, targetOrigin = window.location.origin): void {\n        const msgData: MessageData = {\n            source: messageSource,\n            url,\n            keepOpen,\n        };\n        const logger = new Logger(\"_notifyParent\");\n        if (parent) {\n            logger.debug(\"With parent. Using parent.postMessage.\");\n            parent.postMessage(msgData, targetOrigin);\n        } else {\n            logger.debug(\"No parent. Using BroadcastChannel.\");\n            const state = new URL(url).searchParams.get(\"state\");\n            if (!state) {\n                throw new Error(\"No parent and no state in URL. Can't complete notification.\");\n            }\n            const channel = new BroadcastChannel(`oidc-client-popup-${state}`);\n            channel.postMessage(msgData);\n            channel.close();\n        }\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { type OidcClientSettings, OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport type { PopupWindowFeatures } from \"./utils/PopupUtils\";\nimport { WebStorageStateStore } from \"./WebStorageStateStore\";\nimport { InMemoryWebStorage } from \"./InMemoryWebStorage\";\nimport type { StateStore } from \"./StateStore\";\n\nexport const DefaultPopupWindowFeatures: PopupWindowFeatures = {\n    location: false,\n    toolbar: false,\n    height: 640,\n    closePopupWindowAfterInSeconds: -1,\n};\nexport const DefaultPopupTarget = \"_blank\";\nconst DefaultAccessTokenExpiringNotificationTimeInSeconds = 60;\nconst DefaultCheckSessionIntervalInSeconds = 2;\nexport const DefaultSilentRequestTimeoutInSeconds = 10;\n\n/**\n * The settings used to configure the {@link UserManager}.\n *\n * @public\n */\nexport interface UserManagerSettings extends OidcClientSettings {\n    /** The URL for the page containing the call to signinPopupCallback to handle the callback from the OIDC/OAuth2 */\n    popup_redirect_uri?: string;\n    popup_post_logout_redirect_uri?: string;\n    /**\n     * The features parameter to window.open for the popup signin window. By default, the popup is\n     * placed centered in front of the window opener.\n     * (default: \\{ location: false, menubar: false, height: 640, closePopupWindowAfterInSeconds: -1 \\})\n     */\n    popupWindowFeatures?: PopupWindowFeatures;\n    /** The target parameter to window.open for the popup signin window (default: \"_blank\") */\n    popupWindowTarget?: string;\n    /** The methods window.location method used to redirect (default: \"assign\") */\n    redirectMethod?: \"replace\" | \"assign\";\n    /** The methods target window being redirected (default: \"self\") */\n    redirectTarget?: \"top\" | \"self\";\n\n    /** The target to pass while calling postMessage inside iframe for callback (default: window.location.origin) */\n    iframeNotifyParentOrigin?: string;\n\n    /** The script origin to check during 'message' callback execution while performing silent auth via iframe (default: window.location.origin) */\n    iframeScriptOrigin?: string;\n\n    /** The URL for the page containing the code handling the silent renew */\n    silent_redirect_uri?: string;\n    /** Number of seconds to wait for the silent renew to return before assuming it has failed or timed out (default: 10) */\n    silentRequestTimeoutInSeconds?: number;\n    /** Flag to indicate if there should be an automatic attempt to renew the access token prior to its expiration. The automatic renew attempt starts 1 minute before the access token expires (default: true) */\n    automaticSilentRenew?: boolean;\n    /** Flag to validate user.profile.sub in silent renew calls (default: true) */\n    validateSubOnSilentRenew?: boolean;\n    /** Flag to control if id_token is included as id_token_hint in silent renew calls (default: false) */\n    includeIdTokenInSilentRenew?: boolean;\n\n    /** Will raise events for when user has performed a signout at the OP (default: false) */\n    monitorSession?: boolean;\n    monitorAnonymousSession?: boolean;\n    /** Interval in seconds to check the user's session (default: 2) */\n    checkSessionIntervalInSeconds?: number;\n    query_status_response_type?: string;\n    stopCheckSessionOnError?: boolean;\n\n    /**\n     * The `token_type_hint`s to pass to the authority server by default (default: [\"access_token\", \"refresh_token\"])\n     *\n     * Token types will be revoked in the same order as they are given here.\n     */\n    revokeTokenTypes?: (\"access_token\" | \"refresh_token\")[];\n    /** Will invoke the revocation endpoint on signout if there is an access token for the user (default: false) */\n    revokeTokensOnSignout?: boolean;\n    /** Flag to control if id_token is included as id_token_hint in silent signout calls (default: false) */\n    includeIdTokenInSilentSignout?: boolean;\n\n    /** The number of seconds before an access token is to expire to raise the accessTokenExpiring event (default: 60) */\n    accessTokenExpiringNotificationTimeInSeconds?: number;\n\n    /**\n     * Storage object used to persist User for currently authenticated user (default: window.sessionStorage, InMemoryWebStorage iff no window).\n     *  E.g. `userStore: new WebStorageStateStore({ store: window.localStorage })`\n     */\n    userStore?: StateStore;\n}\n\n/**\n * The settings with defaults applied of the {@link UserManager}.\n * @see {@link UserManagerSettings}\n *\n * @public\n */\nexport class UserManagerSettingsStore extends OidcClientSettingsStore {\n    public readonly popup_redirect_uri: string;\n    public readonly popup_post_logout_redirect_uri: string | undefined;\n    public readonly popupWindowFeatures: PopupWindowFeatures;\n    public readonly popupWindowTarget: string;\n    public readonly redirectMethod: \"replace\" | \"assign\";\n    public readonly redirectTarget: \"top\" | \"self\";\n\n    public readonly iframeNotifyParentOrigin: string | undefined;\n    public readonly iframeScriptOrigin: string | undefined;\n\n    public readonly silent_redirect_uri: string;\n    public readonly silentRequestTimeoutInSeconds: number;\n    public readonly automaticSilentRenew: boolean;\n    public readonly validateSubOnSilentRenew: boolean;\n    public readonly includeIdTokenInSilentRenew: boolean;\n\n    public readonly monitorSession: boolean;\n    public readonly monitorAnonymousSession: boolean;\n    public readonly checkSessionIntervalInSeconds: number;\n    public readonly query_status_response_type: string;\n    public readonly stopCheckSessionOnError: boolean;\n\n    public readonly revokeTokenTypes: (\"access_token\" | \"refresh_token\")[];\n    public readonly revokeTokensOnSignout: boolean;\n    public readonly includeIdTokenInSilentSignout: boolean;\n\n    public readonly accessTokenExpiringNotificationTimeInSeconds: number;\n\n    public readonly userStore: StateStore;\n\n    public constructor(args: UserManagerSettings) {\n        const {\n            popup_redirect_uri = args.redirect_uri,\n            popup_post_logout_redirect_uri = args.post_logout_redirect_uri,\n            popupWindowFeatures = DefaultPopupWindowFeatures,\n            popupWindowTarget = DefaultPopupTarget,\n            redirectMethod = \"assign\",\n            redirectTarget = \"self\",\n\n            iframeNotifyParentOrigin = args.iframeNotifyParentOrigin,\n            iframeScriptOrigin = args.iframeScriptOrigin,\n\n            requestTimeoutInSeconds,\n            silent_redirect_uri = args.redirect_uri,\n            silentRequestTimeoutInSeconds,\n            automaticSilentRenew = true,\n            validateSubOnSilentRenew = true,\n            includeIdTokenInSilentRenew = false,\n\n            monitorSession = false,\n            monitorAnonymousSession = false,\n            checkSessionIntervalInSeconds = DefaultCheckSessionIntervalInSeconds,\n            query_status_response_type = \"code\",\n            stopCheckSessionOnError = true,\n\n            revokeTokenTypes = [\"access_token\", \"refresh_token\"],\n            revokeTokensOnSignout = false,\n            includeIdTokenInSilentSignout = false,\n\n            accessTokenExpiringNotificationTimeInSeconds = DefaultAccessTokenExpiringNotificationTimeInSeconds,\n\n            userStore,\n        } = args;\n\n        super(args);\n\n        this.popup_redirect_uri = popup_redirect_uri;\n        this.popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;\n        this.popupWindowFeatures = popupWindowFeatures;\n        this.popupWindowTarget = popupWindowTarget;\n        this.redirectMethod = redirectMethod;\n        this.redirectTarget = redirectTarget;\n\n        this.iframeNotifyParentOrigin = iframeNotifyParentOrigin;\n        this.iframeScriptOrigin = iframeScriptOrigin;\n\n        this.silent_redirect_uri = silent_redirect_uri;\n        this.silentRequestTimeoutInSeconds = silentRequestTimeoutInSeconds || requestTimeoutInSeconds || DefaultSilentRequestTimeoutInSeconds;\n        this.automaticSilentRenew = automaticSilentRenew;\n        this.validateSubOnSilentRenew = validateSubOnSilentRenew;\n        this.includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;\n\n        this.monitorSession = monitorSession;\n        this.monitorAnonymousSession = monitorAnonymousSession;\n        this.checkSessionIntervalInSeconds = checkSessionIntervalInSeconds;\n        this.stopCheckSessionOnError = stopCheckSessionOnError;\n        this.query_status_response_type = query_status_response_type;\n\n        this.revokeTokenTypes = revokeTokenTypes;\n        this.revokeTokensOnSignout = revokeTokensOnSignout;\n        this.includeIdTokenInSilentSignout = includeIdTokenInSilentSignout;\n\n        this.accessTokenExpiringNotificationTimeInSeconds = accessTokenExpiringNotificationTimeInSeconds;\n\n        if (userStore) {\n            this.userStore = userStore;\n        }\n        else {\n            const store = typeof window !== \"undefined\" ? window.sessionStorage : new InMemoryWebStorage();\n            this.userStore = new WebStorageStateStore({ store });\n        }\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport { ErrorTimeout } from \"../errors\";\nimport type { NavigateParams, NavigateResponse } from \"./IWindow\";\nimport { AbstractChildWindow } from \"./AbstractChildWindow\";\nimport { DefaultSilentRequestTimeoutInSeconds } from \"../UserManagerSettings\";\n\n/**\n * @public\n */\nexport interface IFrameWindowParams {\n    silentRequestTimeoutInSeconds?: number;\n}\n\n/**\n * @internal\n */\nexport class IFrameWindow extends AbstractChildWindow {\n    protected readonly _logger = new Logger(\"IFrameWindow\");\n    private _frame: HTMLIFrameElement | null;\n    private _timeoutInSeconds: number;\n\n    public constructor({\n        silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds,\n    }: IFrameWindowParams) {\n        super();\n        this._timeoutInSeconds = silentRequestTimeoutInSeconds;\n\n        this._frame = IFrameWindow.createHiddenIframe();\n        this._window = this._frame.contentWindow;\n    }\n\n    private static createHiddenIframe(): HTMLIFrameElement {\n        const iframe = window.document.createElement(\"iframe\");\n\n        // shotgun approach\n        iframe.style.visibility = \"hidden\";\n        iframe.style.position = \"fixed\";\n        iframe.style.left = \"-1000px\";\n        iframe.style.top = \"0\";\n        iframe.width = \"0\";\n        iframe.height = \"0\";\n\n        window.document.body.appendChild(iframe);\n        return iframe;\n    }\n\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\n        this._logger.debug(\"navigate: Using timeout of:\", this._timeoutInSeconds);\n        const timer = setTimeout(() => void this._abort.raise(new ErrorTimeout(\"IFrame timed out without a response\")), this._timeoutInSeconds * 1000);\n        this._disposeHandlers.add(() => clearTimeout(timer));\n\n        return await super.navigate(params);\n    }\n\n    public close(): void {\n        if (this._frame) {\n            if (this._frame.parentNode) {\n                this._frame.addEventListener(\"load\", (ev) => {\n                    const frame = ev.target as HTMLIFrameElement;\n                    frame.parentNode?.removeChild(frame);\n                    void this._abort.raise(new Error(\"IFrame removed from DOM\"));\n                }, true);\n                this._frame.contentWindow?.location.replace(\"about:blank\");\n            }\n            this._frame = null;\n        }\n        this._window = null;\n    }\n\n    public static notifyParent(url: string, targetOrigin?: string): void {\n        return super._notifyParent(window.parent, url, false, targetOrigin);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\nimport { IFrameWindow, type IFrameWindowParams } from \"./IFrameWindow\";\nimport type { INavigator } from \"./INavigator\";\n\n/**\n * @internal\n */\nexport class IFrameNavigator implements INavigator {\n    private readonly _logger = new Logger(\"IFrameNavigator\");\n\n    constructor(private _settings: UserManagerSettingsStore) {}\n\n    public async prepare({\n        silentRequestTimeoutInSeconds = this._settings.silentRequestTimeoutInSeconds,\n    }: IFrameWindowParams): Promise<IFrameWindow> {\n        return new IFrameWindow({ silentRequestTimeoutInSeconds });\n    }\n\n    public async callback(url: string): Promise<void> {\n        this._logger.create(\"callback\");\n        IFrameWindow.notifyParent(url, this._settings.iframeNotifyParentOrigin);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, PopupUtils, type PopupWindowFeatures } from \"../utils\";\nimport { DefaultPopupWindowFeatures, DefaultPopupTarget } from \"../UserManagerSettings\";\nimport { AbstractChildWindow } from \"./AbstractChildWindow\";\nimport type { NavigateParams, NavigateResponse } from \"./IWindow\";\n\nconst checkForPopupClosedInterval = 500;\nconst second = 1000;\n\n/**\n * @public\n */\nexport interface PopupWindowParams {\n    popupWindowFeatures?: PopupWindowFeatures;\n    popupWindowTarget?: string;\n    /** An AbortSignal to set request's signal. */\n    popupSignal?: AbortSignal | null;\n}\n\n/**\n * @internal\n */\nexport class PopupWindow extends AbstractChildWindow {\n    protected readonly _logger = new Logger(\"PopupWindow\");\n\n    protected _window: WindowProxy | null;\n\n    public constructor({\n        popupWindowTarget = DefaultPopupTarget,\n        popupWindowFeatures = {},\n        popupSignal,\n    }: PopupWindowParams) {\n        super();\n        const centeredPopup = PopupUtils.center({ ...DefaultPopupWindowFeatures, ...popupWindowFeatures });\n        this._window = window.open(undefined, popupWindowTarget, PopupUtils.serialize(centeredPopup));\n\n        if (popupSignal) {\n            popupSignal.addEventListener(\"abort\", () => {\n                void this._abort.raise(new Error(popupSignal.reason ?? \"Popup aborted\"));\n            });\n        }\n\n        if (popupWindowFeatures.closePopupWindowAfterInSeconds && popupWindowFeatures.closePopupWindowAfterInSeconds > 0) {\n            setTimeout(() => {\n                if (!this._window || typeof this._window.closed !== \"boolean\" || this._window.closed) {\n                    void this._abort.raise(new Error(\"Popup blocked by user\"));\n                    return;\n                }\n\n                this.close();\n            }, popupWindowFeatures.closePopupWindowAfterInSeconds * second);\n        }\n    }\n\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\n        this._window?.focus();\n\n        const popupClosedInterval = setInterval(() => {\n            if (!this._window || this._window.closed) {\n                this._logger.debug(\"Popup closed by user or isolated by redirect\");\n                clearPopupClosedInterval();\n                this._disposeHandlers.delete(clearPopupClosedInterval);\n            }\n        }, checkForPopupClosedInterval);\n        const clearPopupClosedInterval = () => clearInterval(popupClosedInterval);\n        this._disposeHandlers.add(clearPopupClosedInterval);\n\n        return await super.navigate(params);\n    }\n\n    public close(): void {\n        if (this._window) {\n            if (!this._window.closed) {\n                this._window.close();\n                void this._abort.raise(new Error(\"Popup closed\"));\n            }\n        }\n        this._window = null;\n    }\n\n    public static notifyOpener(url: string, keepOpen: boolean): void {\n        super._notifyParent(window.opener, url, keepOpen);\n        if (!keepOpen && !window.opener) {\n            window.close();\n        }\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport { PopupWindow, type PopupWindowParams } from \"./PopupWindow\";\nimport type { INavigator } from \"./INavigator\";\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\n\n/**\n * @internal\n */\nexport class PopupNavigator implements INavigator {\n    private readonly _logger = new Logger(\"PopupNavigator\");\n\n    constructor(private _settings: UserManagerSettingsStore) { }\n\n    public async prepare({\n        popupWindowFeatures = this._settings.popupWindowFeatures,\n        popupWindowTarget = this._settings.popupWindowTarget,\n        popupSignal,\n    }: PopupWindowParams): Promise<PopupWindow> {\n        return new PopupWindow({ popupWindowFeatures, popupWindowTarget, popupSignal });\n    }\n\n    public async callback(url: string, { keepOpen = false }): Promise<void> {\n        this._logger.create(\"callback\");\n\n        PopupWindow.notifyOpener(url, keepOpen);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\nimport type { INavigator } from \"./INavigator\";\nimport type { IWindow } from \"./IWindow\";\n\n/**\n * @public\n */\nexport interface RedirectParams {\n    redirectMethod?: \"replace\" | \"assign\";\n    redirectTarget?: \"top\" | \"self\";\n}\n\n/**\n * @internal\n */\nexport class RedirectNavigator implements INavigator {\n    private readonly _logger = new Logger(\"RedirectNavigator\");\n\n    constructor(private _settings: UserManagerSettingsStore) {}\n\n    public async prepare({\n        redirectMethod = this._settings.redirectMethod,\n        redirectTarget = this._settings.redirectTarget,\n    }: RedirectParams): Promise<IWindow> {\n        this._logger.create(\"prepare\");\n        let targetWindow = window.self as Window;\n\n        if (redirectTarget === \"top\") {\n            targetWindow = window.top ?? window.self;\n        }\n    \n        const redirect = targetWindow.location[redirectMethod].bind(targetWindow.location) as (url: string) => never;\n        let abort: (reason: Error) => void;\n        return {\n            navigate: async (params): Promise<never> => {\n                this._logger.create(\"navigate\");\n                // We use a promise that never resolves to block the caller\n                const promise = new Promise((resolve, reject) => {\n                    abort = reject;\n                });\n                redirect(params.url);\n                return await (promise as Promise<never>);\n            },\n            close: () => {\n                this._logger.create(\"close\");\n                abort?.(new Error(\"Redirect aborted\"));\n                targetWindow.stop();\n            },\n        };\n    }\n\n    public async callback(): Promise<void> {\n        return;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Event } from \"./utils\";\nimport { AccessTokenEvents } from \"./AccessTokenEvents\";\nimport type { UserManagerSettingsStore } from \"./UserManagerSettings\";\nimport type { User } from \"./User\";\n\n/**\n * @public\n */\nexport type UserLoadedCallback = (user: User) => Promise<void> | void;\n/**\n * @public\n */\nexport type UserUnloadedCallback = () => Promise<void> | void;\n/**\n * @public\n */\nexport type SilentRenewErrorCallback = (error: Error) => Promise<void> | void;\n/**\n * @public\n */\nexport type UserSignedInCallback = () => Promise<void> | void;\n/**\n * @public\n */\nexport type UserSignedOutCallback = () => Promise<void> | void;\n/**\n * @public\n */\nexport type UserSessionChangedCallback = () => Promise<void> | void;\n\n/**\n * @public\n */\nexport class UserManagerEvents extends AccessTokenEvents {\n    protected readonly _logger = new Logger(\"UserManagerEvents\");\n\n    private readonly _userLoaded = new Event<[User]>(\"User loaded\");\n    private readonly _userUnloaded = new Event<[]>(\"User unloaded\");\n    private readonly _silentRenewError = new Event<[Error]>(\"Silent renew error\");\n    private readonly _userSignedIn = new Event<[]>(\"User signed in\");\n    private readonly _userSignedOut = new Event<[]>(\"User signed out\");\n    private readonly _userSessionChanged = new Event<[]>(\"User session changed\");\n\n    public constructor(settings: UserManagerSettingsStore) {\n        super({ expiringNotificationTimeInSeconds: settings.accessTokenExpiringNotificationTimeInSeconds });\n    }\n\n    public async load(user: User, raiseEvent=true): Promise<void> {\n        await super.load(user);\n        if (raiseEvent) {\n            await this._userLoaded.raise(user);\n        }\n    }\n\n    public async unload(): Promise<void> {\n        await super.unload();\n        await this._userUnloaded.raise();\n    }\n\n    /**\n     * Add callback: Raised when a user session has been established (or re-established).\n     */\n    public addUserLoaded(cb: UserLoadedCallback): () => void {\n        return this._userLoaded.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when a user session has been established (or re-established).\n     */\n    public removeUserLoaded(cb: UserLoadedCallback): void {\n        return this._userLoaded.removeHandler(cb);\n    }\n\n    /**\n     * Add callback: Raised when a user session has been terminated.\n     */\n    public addUserUnloaded(cb: UserUnloadedCallback): () => void {\n        return this._userUnloaded.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when a user session has been terminated.\n     */\n    public removeUserUnloaded(cb: UserUnloadedCallback): void {\n        return this._userUnloaded.removeHandler(cb);\n    }\n\n    /**\n     * Add callback: Raised when the automatic silent renew has failed.\n     */\n    public addSilentRenewError(cb: SilentRenewErrorCallback): () => void {\n        return this._silentRenewError.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the automatic silent renew has failed.\n     */\n    public removeSilentRenewError(cb: SilentRenewErrorCallback): void {\n        return this._silentRenewError.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public async _raiseSilentRenewError(e: Error): Promise<void> {\n        await this._silentRenewError.raise(e);\n    }\n\n    /**\n     * Add callback: Raised when the user is signed in (when `monitorSession` is set).\n     * @see {@link UserManagerSettings.monitorSession}\n     */\n    public addUserSignedIn(cb: UserSignedInCallback): () => void {\n        return this._userSignedIn.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the user is signed in (when `monitorSession` is set).\n     */\n    public removeUserSignedIn(cb: UserSignedInCallback): void {\n        this._userSignedIn.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public async _raiseUserSignedIn(): Promise<void> {\n        await this._userSignedIn.raise();\n    }\n\n    /**\n     * Add callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n     * @see {@link UserManagerSettings.monitorSession}\n     */\n    public addUserSignedOut(cb: UserSignedOutCallback): () => void {\n        return this._userSignedOut.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n     */\n    public removeUserSignedOut(cb: UserSignedOutCallback): void {\n        this._userSignedOut.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public async _raiseUserSignedOut(): Promise<void> {\n        await this._userSignedOut.raise();\n    }\n\n    /**\n     * Add callback: Raised when the user session changed (when `monitorSession` is set).\n     * @see {@link UserManagerSettings.monitorSession}\n     */\n    public addUserSessionChanged(cb: UserSessionChangedCallback): () => void {\n        return this._userSessionChanged.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the user session changed (when `monitorSession` is set).\n     */\n    public removeUserSessionChanged(cb: UserSessionChangedCallback): void {\n        this._userSessionChanged.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public async _raiseUserSessionChanged(): Promise<void> {\n        await this._userSessionChanged.raise();\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Timer } from \"./utils\";\nimport { ErrorTimeout } from \"./errors\";\nimport type { UserManager } from \"./UserManager\";\nimport type { AccessTokenCallback } from \"./AccessTokenEvents\";\n\n/**\n * @internal\n */\nexport class SilentRenewService {\n    protected _logger = new Logger(\"SilentRenewService\");\n    private _isStarted = false;\n    private readonly _retryTimer = new Timer(\"Retry Silent Renew\");\n\n    public constructor(private _userManager: UserManager) {}\n\n    public async start(): Promise<void> {\n        const logger = this._logger.create(\"start\");\n        if (!this._isStarted) {\n            this._isStarted = true;\n            this._userManager.events.addAccessTokenExpiring(this._tokenExpiring);\n            this._retryTimer.addHandler(this._tokenExpiring);\n\n            // this will trigger loading of the user so the expiring events can be initialized\n            try {\n                await this._userManager.getUser();\n                // deliberate nop\n            }\n            catch (err) {\n                // catch to suppress errors since we're in a ctor\n                logger.error(\"getUser error\", err);\n            }\n        }\n    }\n\n    public stop(): void {\n        if (this._isStarted) {\n            this._retryTimer.cancel();\n            this._retryTimer.removeHandler(this._tokenExpiring);\n            this._userManager.events.removeAccessTokenExpiring(this._tokenExpiring);\n            this._isStarted = false;\n        }\n    }\n\n    protected _tokenExpiring: AccessTokenCallback = async () => {\n        const logger = this._logger.create(\"_tokenExpiring\");\n        try {\n            await this._userManager.signinSilent();\n            logger.debug(\"silent token renewal successful\");\n        }\n        catch (err) {\n            if (err instanceof ErrorTimeout) {\n                // no response from authority server, e.g. IFrame timeout, ...\n                logger.warn(\"ErrorTimeout from signinSilent:\", err, \"retry in 5s\");\n                this._retryTimer.init(5);\n                return;\n            }\n\n            logger.error(\"Error from signinSilent:\", err);\n            await this._userManager.events._raiseSilentRenewError(err as Error);\n        }\n    };\n}\n","// Copyright (C) AuthTS Contributors\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport type { UserProfile } from \"./User\";\n\n/**\n * Fake state store implementation necessary for validating refresh token requests.\n *\n * @public\n */\nexport class RefreshState {\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    public readonly data?: unknown;\n\n    public readonly refresh_token: string;\n    public readonly id_token?: string;\n    public readonly session_state: string | null;\n    public readonly scope?: string;\n    public readonly profile: UserProfile;\n\n    constructor(args: {\n        refresh_token: string;\n        id_token?: string;\n        session_state: string | null;\n        scope?: string;\n        profile: UserProfile;\n\n        state?: unknown;\n    }) {\n        this.refresh_token = args.refresh_token;\n        this.id_token = args.id_token;\n        this.session_state = args.session_state;\n        this.scope = args.scope;\n        this.profile = args.profile;\n\n        this.data = args.state;\n\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { CryptoUtils, Logger } from \"./utils\";\nimport { ErrorResponse } from \"./errors\";\nimport { type NavigateResponse, type PopupWindowParams, type IWindow, type IFrameWindowParams, type RedirectParams, RedirectNavigator, PopupNavigator, IFrameNavigator, type INavigator } from \"./navigators\";\nimport { OidcClient, type CreateSigninRequestArgs, type CreateSignoutRequestArgs, type ProcessResourceOwnerPasswordCredentialsArgs, type UseRefreshTokenArgs } from \"./OidcClient\";\nimport { type UserManagerSettings, UserManagerSettingsStore } from \"./UserManagerSettings\";\nimport { User } from \"./User\";\nimport { UserManagerEvents } from \"./UserManagerEvents\";\nimport { SilentRenewService } from \"./SilentRenewService\";\nimport { SessionMonitor } from \"./SessionMonitor\";\nimport type { SessionStatus } from \"./SessionStatus\";\nimport type { SignoutResponse } from \"./SignoutResponse\";\nimport type { MetadataService } from \"./MetadataService\";\nimport { RefreshState } from \"./RefreshState\";\nimport type { SigninResponse } from \"./SigninResponse\";\nimport type { ExtraHeader, DPoPSettings } from \"./OidcClientSettings\";\nimport { DPoPState } from \"./DPoPStore\";\n\n/**\n * @public\n */\nexport type ExtraSigninRequestArgs = Pick<CreateSigninRequestArgs, \"nonce\" | \"extraQueryParams\" | \"extraTokenParams\" | \"state\" | \"redirect_uri\" | \"prompt\" | \"acr_values\" | \"login_hint\" | \"scope\" | \"max_age\" | \"ui_locales\" | \"resource\" | \"url_state\">;\n/**\n * @public\n */\nexport type ExtraSignoutRequestArgs = Pick<CreateSignoutRequestArgs, \"extraQueryParams\" | \"state\" | \"id_token_hint\" | \"post_logout_redirect_uri\" | \"url_state\">;\n\n/**\n * @public\n */\nexport type RevokeTokensTypes = UserManagerSettings[\"revokeTokenTypes\"];\n\n/**\n * @public\n */\nexport type SigninRedirectArgs = RedirectParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SigninPopupArgs = PopupWindowParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SigninSilentArgs = IFrameWindowParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SigninResourceOwnerCredentialsArgs = ProcessResourceOwnerPasswordCredentialsArgs;\n\n/**\n * @public\n */\nexport type QuerySessionStatusArgs = IFrameWindowParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SignoutRedirectArgs = RedirectParams & ExtraSignoutRequestArgs;\n\n/**\n * @public\n */\nexport type SignoutPopupArgs = PopupWindowParams & ExtraSignoutRequestArgs;\n\n/**\n * @public\n */\nexport type SignoutSilentArgs = IFrameWindowParams & ExtraSignoutRequestArgs;\n\n/**\n * Provides a higher level API for signing a user in, signing out, managing the user's claims returned from the identity provider,\n * and managing an access token returned from the identity provider (OAuth2/OIDC).\n *\n * @public\n */\nexport class UserManager {\n    /** Get the settings used to configure the `UserManager`. */\n    public readonly settings: UserManagerSettingsStore;\n    protected readonly _logger = new Logger(\"UserManager\");\n\n    protected readonly _client: OidcClient;\n    protected readonly _redirectNavigator: INavigator;\n    protected readonly _popupNavigator: INavigator;\n    protected readonly _iframeNavigator: INavigator;\n    protected readonly _events: UserManagerEvents;\n    protected readonly _silentRenewService: SilentRenewService;\n    protected readonly _sessionMonitor: SessionMonitor | null;\n\n    public constructor(settings: UserManagerSettings, redirectNavigator?: INavigator, popupNavigator?: INavigator, iframeNavigator?: INavigator) {\n        this.settings = new UserManagerSettingsStore(settings);\n\n        this._client = new OidcClient(settings);\n\n        this._redirectNavigator = redirectNavigator ?? new RedirectNavigator(this.settings);\n        this._popupNavigator = popupNavigator ?? new PopupNavigator(this.settings);\n        this._iframeNavigator = iframeNavigator ?? new IFrameNavigator(this.settings);\n\n        this._events = new UserManagerEvents(this.settings);\n        this._silentRenewService = new SilentRenewService(this);\n\n        // order is important for the following properties; these services depend upon the events.\n        if (this.settings.automaticSilentRenew) {\n            this.startSilentRenew();\n        }\n\n        this._sessionMonitor = null;\n        if (this.settings.monitorSession) {\n            this._sessionMonitor = new SessionMonitor(this);\n        }\n    }\n\n    /**\n     * Get object used to register for events raised by the `UserManager`.\n     */\n    public get events(): UserManagerEvents {\n        return this._events;\n    }\n\n    /**\n     * Get object used to access the metadata configuration of the identity provider.\n     */\n    public get metadataService(): MetadataService {\n        return this._client.metadataService;\n    }\n\n    /**\n     * Load the `User` object for the currently authenticated user.\n     *\n     * @param raiseEvent - If `true`, the `UserLoaded` event will be raised. Defaults to false.\n     * @returns A promise\n     */\n    public async getUser(raiseEvent = false): Promise<User | null> {\n        const logger = this._logger.create(\"getUser\");\n        const user = await this._loadUser();\n        if (user) {\n            logger.info(\"user loaded\");\n            await this._events.load(user, raiseEvent);\n            return user;\n        }\n\n        logger.info(\"user not found in storage\");\n        return null;\n    }\n\n    /**\n     * Remove from any storage the currently authenticated user.\n     *\n     * @returns A promise\n     */\n    public async removeUser(): Promise<void> {\n        const logger = this._logger.create(\"removeUser\");\n        await this.storeUser(null);\n        logger.info(\"user removed from storage\");\n        await this._events.unload();\n    }\n\n    /**\n     * Trigger a redirect of the current window to the authorization endpoint.\n     *\n     * @returns A promise\n     *\n     * @throws `Error` In cases of wrong authentication.\n     */\n    public async signinRedirect(args: SigninRedirectArgs = {}): Promise<void> {\n        this._logger.create(\"signinRedirect\");\n        const {\n            redirectMethod,\n            ...requestArgs\n        } = args;\n\n        let dpopJkt: string | undefined;\n        if (this.settings.dpop?.bind_authorization_code) {\n            dpopJkt = await this.generateDPoPJkt(this.settings.dpop);\n        }\n\n        const handle = await this._redirectNavigator.prepare({ redirectMethod });\n        await this._signinStart({\n            request_type: \"si:r\",\n            dpopJkt,\n            ...requestArgs,\n        }, handle);\n    }\n\n    /**\n     * Process the response (callback) from the authorization endpoint.\n     * It is recommended to use {@link UserManager.signinCallback} instead.\n     *\n     * @returns A promise containing the authenticated `User`.\n     *\n     * @see {@link UserManager.signinCallback}\n     */\n    public async signinRedirectCallback(url = window.location.href): Promise<User> {\n        const logger = this._logger.create(\"signinRedirectCallback\");\n        const user = await this._signinEnd(url);\n        if (user.profile && user.profile.sub) {\n            logger.info(\"success, signed in subject\", user.profile.sub);\n        }\n        else {\n            logger.info(\"no subject\");\n        }\n\n        return user;\n    }\n\n    /**\n     * Trigger the signin with user/password.\n     *\n     * @returns A promise containing the authenticated `User`.\n     * @throws {@link ErrorResponse} In cases of wrong authentication.\n     */\n    public async signinResourceOwnerCredentials({\n        username,\n        password,\n        skipUserInfo = false,\n    }: SigninResourceOwnerCredentialsArgs): Promise<User> {\n        const logger = this._logger.create(\"signinResourceOwnerCredential\");\n\n        const signinResponse = await this._client.processResourceOwnerPasswordCredentials({\n            username,\n            password,\n            skipUserInfo,\n            extraTokenParams: this.settings.extraTokenParams,\n        });\n        logger.debug(\"got signin response\");\n\n        const user = await this._buildUser(signinResponse);\n        if (user.profile && user.profile.sub) {\n            logger.info(\"success, signed in subject\", user.profile.sub);\n        } else {\n            logger.info(\"no subject\");\n        }\n        return user;\n    }\n\n    /**\n     * Trigger a request (via a popup window) to the authorization endpoint.\n     *\n     * @returns A promise containing the authenticated `User`.\n     * @throws `Error` In cases of wrong authentication.\n     */\n    public async signinPopup(args: SigninPopupArgs = {}): Promise<User> {\n        const logger = this._logger.create(\"signinPopup\");\n\n        let dpopJkt: string | undefined;\n        if (this.settings.dpop?.bind_authorization_code) {\n            dpopJkt = await this.generateDPoPJkt(this.settings.dpop);\n        }\n\n        const {\n            popupWindowFeatures,\n            popupWindowTarget,\n            popupSignal,\n            ...requestArgs\n        } = args;\n        const url = this.settings.popup_redirect_uri;\n        if (!url) {\n            logger.throw(new Error(\"No popup_redirect_uri configured\"));\n        }\n\n        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget, popupSignal });\n        const user = await this._signin({\n            request_type: \"si:p\",\n            redirect_uri: url,\n            display: \"popup\",\n            dpopJkt,\n            ...requestArgs,\n        }, handle);\n        if (user) {\n            if (user.profile && user.profile.sub) {\n                logger.info(\"success, signed in subject\", user.profile.sub);\n            } else {\n                logger.info(\"no subject\");\n            }\n        }\n\n        return user;\n    }\n\n    /**\n     * Notify the opening window of response (callback) from the authorization endpoint.\n     * It is recommended to use {@link UserManager.signinCallback} instead.\n     *\n     * @returns A promise\n     *\n     * @see {@link UserManager.signinCallback}\n     */\n    public async signinPopupCallback(url = window.location.href, keepOpen = false): Promise<void> {\n        const logger = this._logger.create(\"signinPopupCallback\");\n        await this._popupNavigator.callback(url, { keepOpen });\n        logger.info(\"success\");\n    }\n\n    /**\n     * Trigger a silent request (via refresh token or an iframe) to the authorization endpoint.\n     *\n     * @returns A promise that contains the authenticated `User`.\n     */\n    public async signinSilent(args: SigninSilentArgs = {}): Promise<User | null> {\n        const logger = this._logger.create(\"signinSilent\");\n        const {\n            silentRequestTimeoutInSeconds,\n            ...requestArgs\n        } = args;\n        // first determine if we have a refresh token, or need to use iframe\n        let user = await this._loadUser();\n        if (user?.refresh_token) {\n            logger.debug(\"using refresh token\");\n            const state = new RefreshState(user as Required<User>);\n            return await this._useRefreshToken({\n                state,\n                redirect_uri: requestArgs.redirect_uri,\n                resource: requestArgs.resource,\n                extraTokenParams: requestArgs.extraTokenParams,\n                timeoutInSeconds: silentRequestTimeoutInSeconds,\n            });\n        }\n\n        let dpopJkt: string | undefined;\n        if (this.settings.dpop?.bind_authorization_code) {\n            dpopJkt = await this.generateDPoPJkt(this.settings.dpop);\n        }\n\n        const url = this.settings.silent_redirect_uri;\n        if (!url) {\n            logger.throw(new Error(\"No silent_redirect_uri configured\"));\n        }\n\n        let verifySub: string | undefined;\n        if (user && this.settings.validateSubOnSilentRenew) {\n            logger.debug(\"subject prior to silent renew:\", user.profile.sub);\n            verifySub = user.profile.sub;\n        }\n\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n        user = await this._signin({\n            request_type: \"si:s\",\n            redirect_uri: url,\n            prompt: \"none\",\n            id_token_hint: this.settings.includeIdTokenInSilentRenew ? user?.id_token : undefined,\n            dpopJkt,\n            ...requestArgs,\n        }, handle, verifySub);\n        if (user) {\n            if (user.profile?.sub) {\n                logger.info(\"success, signed in subject\", user.profile.sub);\n            }\n            else {\n                logger.info(\"no subject\");\n            }\n        }\n\n        return user;\n    }\n\n    protected async _useRefreshToken(args: UseRefreshTokenArgs): Promise<User> {\n        const response = await this._client.useRefreshToken({\n            timeoutInSeconds: this.settings.silentRequestTimeoutInSeconds,\n            ...args,\n        });\n        const user = new User({ ...args.state, ...response });\n\n        await this.storeUser(user);\n        await this._events.load(user);\n        return user;\n    }\n\n    /**\n     *\n     * Notify the parent window of response (callback) from the authorization endpoint.\n     * It is recommended to use {@link UserManager.signinCallback} instead.\n     *\n     * @returns A promise\n     *\n     * @see {@link UserManager.signinCallback}\n     */\n    public async signinSilentCallback(url = window.location.href): Promise<void> {\n        const logger = this._logger.create(\"signinSilentCallback\");\n        await this._iframeNavigator.callback(url);\n        logger.info(\"success\");\n    }\n\n    /**\n     * Process any response (callback) from the authorization endpoint, by dispatching the request_type\n     * and executing one of the following functions:\n     * - {@link UserManager.signinRedirectCallback}\n     * - {@link UserManager.signinPopupCallback}\n     * - {@link UserManager.signinSilentCallback}\n     *\n     * @throws `Error` If request_type is unknown or signin cannot be processed.\n     */\n    public async signinCallback(url = window.location.href): Promise<User | undefined> {\n        const { state } = await this._client.readSigninResponseState(url);\n        switch (state.request_type) {\n            case \"si:r\":\n                return await this.signinRedirectCallback(url);\n            case \"si:p\":\n                await this.signinPopupCallback(url);\n                break;\n            case \"si:s\":\n                await this.signinSilentCallback(url);\n                break;\n            default:\n                throw new Error(\"invalid response_type in state\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Process any response (callback) from the end session endpoint, by dispatching the request_type\n     * and executing one of the following functions:\n     * - {@link UserManager.signoutRedirectCallback}\n     * - {@link UserManager.signoutPopupCallback}\n     * - {@link UserManager.signoutSilentCallback}\n     *\n     * @throws `Error` If request_type is unknown or signout cannot be processed.\n     */\n    public async signoutCallback(url = window.location.href, keepOpen = false): Promise<SignoutResponse | undefined> {\n        const { state } = await this._client.readSignoutResponseState(url);\n        if (!state) {\n            return undefined;\n        }\n\n        switch (state.request_type) {\n            case \"so:r\":\n                return await this.signoutRedirectCallback(url);\n            case \"so:p\":\n                await this.signoutPopupCallback(url, keepOpen);\n                break;\n            case \"so:s\":\n                await this.signoutSilentCallback(url);\n                break;\n            default:\n                throw new Error(\"invalid response_type in state\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Query OP for user's current signin status.\n     *\n     * @returns A promise object with session_state and subject identifier.\n     */\n    public async querySessionStatus(args: QuerySessionStatusArgs = {}): Promise<SessionStatus | null> {\n        const logger = this._logger.create(\"querySessionStatus\");\n        const {\n            silentRequestTimeoutInSeconds,\n            ...requestArgs\n        } = args;\n        const url = this.settings.silent_redirect_uri;\n        if (!url) {\n            logger.throw(new Error(\"No silent_redirect_uri configured\"));\n        }\n\n        const user = await this._loadUser();\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n        const navResponse = await this._signinStart({\n            request_type: \"si:s\", // this acts like a signin silent\n            redirect_uri: url,\n            prompt: \"none\",\n            id_token_hint: this.settings.includeIdTokenInSilentRenew ? user?.id_token : undefined,\n            response_type: this.settings.query_status_response_type,\n            scope: \"openid\",\n            skipUserInfo: true,\n            ...requestArgs,\n        }, handle);\n        try {\n            const extraHeaders: Record<string, ExtraHeader> = {};\n            const signinResponse = await this._client.processSigninResponse(navResponse.url, extraHeaders);\n            logger.debug(\"got signin response\");\n\n            if (signinResponse.session_state && signinResponse.profile.sub) {\n                logger.info(\"success for subject\", signinResponse.profile.sub);\n                return {\n                    session_state: signinResponse.session_state,\n                    sub: signinResponse.profile.sub,\n                };\n            }\n\n            logger.info(\"success, user not authenticated\");\n            return null;\n        } catch (err) {\n            if (this.settings.monitorAnonymousSession && err instanceof ErrorResponse) {\n                switch (err.error) {\n                    case \"login_required\":\n                    case \"consent_required\":\n                    case \"interaction_required\":\n                    case \"account_selection_required\":\n                        logger.info(\"success for anonymous user\");\n                        return {\n                            session_state: err.session_state!,\n                        };\n                }\n            }\n            throw err;\n        }\n    }\n\n    protected async _signin(args: CreateSigninRequestArgs, handle: IWindow, verifySub?: string): Promise<User> {\n        const navResponse = await this._signinStart(args, handle);\n        return await this._signinEnd(navResponse.url, verifySub);\n    }\n\n    protected async _signinStart(args: CreateSigninRequestArgs, handle: IWindow): Promise<NavigateResponse> {\n        const logger = this._logger.create(\"_signinStart\");\n\n        try {\n            const signinRequest = await this._client.createSigninRequest(args);\n            logger.debug(\"got signin request\");\n\n            return await handle.navigate({\n                url: signinRequest.url,\n                state: signinRequest.state.id,\n                response_mode: signinRequest.state.response_mode,\n                scriptOrigin: this.settings.iframeScriptOrigin,\n            });\n        } catch (err) {\n            logger.debug(\"error after preparing navigator, closing navigator window\");\n            handle.close();\n            throw err;\n        }\n    }\n\n    protected async _signinEnd(url: string, verifySub?: string): Promise<User> {\n        const logger = this._logger.create(\"_signinEnd\");\n        const extraHeaders: Record<string, ExtraHeader> = {};\n        const signinResponse = await this._client.processSigninResponse(url, extraHeaders);\n        logger.debug(\"got signin response\");\n\n        const user = await this._buildUser(signinResponse, verifySub);\n        return user;\n    }\n\n    protected async _buildUser(signinResponse: SigninResponse, verifySub?: string) {\n        const logger = this._logger.create(\"_buildUser\");\n        const user = new User(signinResponse);\n        if (verifySub) {\n            if (verifySub !== user.profile.sub) {\n                logger.debug(\"current user does not match user returned from signin. sub from signin:\", user.profile.sub);\n                throw new ErrorResponse({ ...signinResponse, error: \"login_required\" });\n            }\n            logger.debug(\"current user matches user returned from signin\");\n        }\n\n        await this.storeUser(user);\n        logger.debug(\"user stored\");\n        await this._events.load(user);\n\n        return user;\n    }\n\n    /**\n     * Trigger a redirect of the current window to the end session endpoint.\n     *\n     * @returns A promise\n     */\n    public async signoutRedirect(args: SignoutRedirectArgs = {}): Promise<void> {\n        const logger = this._logger.create(\"signoutRedirect\");\n        const {\n            redirectMethod,\n            ...requestArgs\n        } = args;\n        const handle = await this._redirectNavigator.prepare({ redirectMethod });\n        await this._signoutStart({\n            request_type: \"so:r\",\n            post_logout_redirect_uri: this.settings.post_logout_redirect_uri,\n            ...requestArgs,\n        }, handle);\n        logger.info(\"success\");\n    }\n\n    /**\n     * Process response (callback) from the end session endpoint.\n     * It is recommended to use {@link UserManager.signoutCallback} instead.\n     *\n     * @returns A promise containing signout response\n     *\n     * @see {@link UserManager.signoutCallback}\n     */\n    public async signoutRedirectCallback(url = window.location.href): Promise<SignoutResponse> {\n        const logger = this._logger.create(\"signoutRedirectCallback\");\n        const response = await this._signoutEnd(url);\n        logger.info(\"success\");\n        return response;\n    }\n\n    /**\n     * Trigger a redirect of a popup window to the end session endpoint.\n     *\n     * @returns A promise\n     */\n    public async signoutPopup(args: SignoutPopupArgs = {}): Promise<void> {\n        const logger = this._logger.create(\"signoutPopup\");\n        const {\n            popupWindowFeatures,\n            popupWindowTarget,\n            popupSignal,\n            ...requestArgs\n        } = args;\n        const url = this.settings.popup_post_logout_redirect_uri;\n\n        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget, popupSignal });\n        await this._signout({\n            request_type: \"so:p\",\n            post_logout_redirect_uri: url,\n            // we're putting a dummy entry in here because we\n            // need a unique id from the state for notification\n            // to the parent window, which is necessary if we\n            // plan to return back to the client after signout\n            // and so we can close the popup after signout\n            state: url == null ? undefined : {},\n            ...requestArgs,\n        }, handle);\n        logger.info(\"success\");\n    }\n\n    /**\n     * Process response (callback) from the end session endpoint from a popup window.\n     * It is recommended to use {@link UserManager.signoutCallback} instead.\n     *\n     * @returns A promise\n     *\n     * @see {@link UserManager.signoutCallback}\n     */\n    public async signoutPopupCallback(url = window.location.href, keepOpen = false): Promise<void> {\n        const logger = this._logger.create(\"signoutPopupCallback\");\n        await this._popupNavigator.callback(url, { keepOpen });\n        logger.info(\"success\");\n    }\n\n    protected async _signout(args: CreateSignoutRequestArgs, handle: IWindow): Promise<SignoutResponse> {\n        const navResponse = await this._signoutStart(args, handle);\n        return await this._signoutEnd(navResponse.url);\n    }\n\n    protected async _signoutStart(args: CreateSignoutRequestArgs = {}, handle: IWindow): Promise<NavigateResponse> {\n        const logger = this._logger.create(\"_signoutStart\");\n\n        try {\n            const user = await this._loadUser();\n            logger.debug(\"loaded current user from storage\");\n\n            if (this.settings.revokeTokensOnSignout) {\n                await this._revokeInternal(user);\n            }\n\n            const id_token = args.id_token_hint || user && user.id_token;\n            if (id_token) {\n                logger.debug(\"setting id_token_hint in signout request\");\n                args.id_token_hint = id_token;\n            }\n\n            await this.removeUser();\n            logger.debug(\"user removed, creating signout request\");\n\n            const signoutRequest = await this._client.createSignoutRequest(args);\n            logger.debug(\"got signout request\");\n\n            return await handle.navigate({\n                url: signoutRequest.url,\n                state: signoutRequest.state?.id,\n                scriptOrigin: this.settings.iframeScriptOrigin,\n            });\n        } catch (err) {\n            logger.debug(\"error after preparing navigator, closing navigator window\");\n            handle.close();\n            throw err;\n        }\n    }\n\n    protected async _signoutEnd(url: string): Promise<SignoutResponse> {\n        const logger = this._logger.create(\"_signoutEnd\");\n        const signoutResponse = await this._client.processSignoutResponse(url);\n        logger.debug(\"got signout response\");\n\n        return signoutResponse;\n    }\n\n    /**\n     * Trigger a silent request (via an iframe) to the end session endpoint.\n     *\n     * @returns A promise\n     */\n    public async signoutSilent(args: SignoutSilentArgs = {}): Promise<void> {\n        const logger = this._logger.create(\"signoutSilent\");\n        const {\n            silentRequestTimeoutInSeconds,\n            ...requestArgs\n        } = args;\n\n        const id_token_hint = this.settings.includeIdTokenInSilentSignout\n            ? (await this._loadUser())?.id_token\n            : undefined;\n\n        const url = this.settings.popup_post_logout_redirect_uri;\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n        await this._signout({\n            request_type: \"so:s\",\n            post_logout_redirect_uri: url,\n            id_token_hint: id_token_hint,\n            ...requestArgs,\n        }, handle);\n\n        logger.info(\"success\");\n    }\n\n    /**\n     * Notify the parent window of response (callback) from the end session endpoint.\n     * It is recommended to use {@link UserManager.signoutCallback} instead.\n     *\n     * @returns A promise\n     *\n     * @see {@link UserManager.signoutCallback}\n     */\n    public async signoutSilentCallback(url = window.location.href): Promise<void> {\n        const logger = this._logger.create(\"signoutSilentCallback\");\n        await this._iframeNavigator.callback(url);\n        logger.info(\"success\");\n    }\n\n    public async revokeTokens(types?: RevokeTokensTypes): Promise<void> {\n        const user = await this._loadUser();\n        await this._revokeInternal(user, types);\n    }\n\n    protected async _revokeInternal(user: User | null, types = this.settings.revokeTokenTypes): Promise<void> {\n        const logger = this._logger.create(\"_revokeInternal\");\n        if (!user) return;\n\n        const typesPresent = types.filter(type => typeof user[type] === \"string\");\n\n        if (!typesPresent.length) {\n            logger.debug(\"no need to revoke due to no token(s)\");\n            return;\n        }\n\n        // don't Promise.all, order matters\n        for (const type of typesPresent) {\n            await this._client.revokeToken(\n                user[type]!,\n                type,\n            );\n            logger.info(`${type} revoked successfully`);\n            if (type !== \"access_token\") {\n                user[type] = null as never;\n            }\n        }\n\n        await this.storeUser(user);\n        logger.debug(\"user stored\");\n        await this._events.load(user);\n    }\n\n    /**\n     * Enables silent renew for the `UserManager`.\n     */\n    public startSilentRenew(): void {\n        this._logger.create(\"startSilentRenew\");\n        void this._silentRenewService.start();\n    }\n\n    /**\n     * Disables silent renew for the `UserManager`.\n     */\n    public stopSilentRenew(): void {\n        this._silentRenewService.stop();\n    }\n\n    protected get _userStoreKey(): string {\n        return `user:${this.settings.authority}:${this.settings.client_id}`;\n    }\n\n    protected async _loadUser(): Promise<User | null> {\n        const logger = this._logger.create(\"_loadUser\");\n        const storageString = await this.settings.userStore.get(this._userStoreKey);\n        if (storageString) {\n            logger.debug(\"user storageString loaded\");\n            return User.fromStorageString(storageString);\n        }\n\n        logger.debug(\"no user storageString\");\n        return null;\n    }\n\n    public async storeUser(user: User | null): Promise<void> {\n        const logger = this._logger.create(\"storeUser\");\n        if (user) {\n            logger.debug(\"storing user\");\n            const storageString = user.toStorageString();\n            await this.settings.userStore.set(this._userStoreKey, storageString);\n        } else {\n            this._logger.debug(\"removing user\");\n            await this.settings.userStore.remove(this._userStoreKey);\n            if (this.settings.dpop) {\n                await this.settings.dpop.store.remove(this.settings.client_id);\n            }\n        }\n    }\n\n    /**\n     * Removes stale state entries in storage for incomplete authorize requests.\n     */\n    public async clearStaleState(): Promise<void> {\n        await this._client.clearStaleState();\n    }\n\n    /**\n     * Dynamically generates a DPoP proof for a given user, URL and optional Http method.\n     * This method is useful when you need to make a request to a resource server\n     * with fetch or similar, and you need to include a DPoP proof in a DPoP header.\n     * @param url - The URL to generate the DPoP proof for\n     * @param user - The user to generate the DPoP proof for\n     * @param httpMethod - Optional, defaults to \"GET\"\n     * @param nonce - Optional nonce provided by the resource server\n     *\n     * @returns A promise containing the DPoP proof or undefined if DPoP is not enabled/no user is found.\n     */\n    public async dpopProof(url: string, user: User, httpMethod?: string, nonce?: string): Promise<string | undefined> {\n        const dpopState = await this.settings.dpop?.store?.get(this.settings.client_id);\n        if (dpopState) {\n            return await CryptoUtils.generateDPoPProof({\n                url,\n                accessToken: user?.access_token,\n                httpMethod: httpMethod,\n                keyPair: dpopState.keys,\n                nonce,\n            });\n        }\n        return undefined;\n    }\n\n    async generateDPoPJkt(dpopSettings: DPoPSettings): Promise<string | undefined> {\n        let dpopState = await dpopSettings.store.get(this.settings.client_id);\n        if (!dpopState) {\n            const dpopKeys = await CryptoUtils.generateDPoPKeys();\n            dpopState = new DPoPState(dpopKeys);\n            await dpopSettings.store.set(this.settings.client_id, dpopState);\n        }\n        return await CryptoUtils.generateDPoPJkt(dpopState.keys);\n    }\n}\n","{\n  \"name\": \"oidc-client-ts\",\n  \"version\": \"3.3.0\",\n  \"description\": \"OpenID Connect (OIDC) & OAuth2 client library\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/authts/oidc-client-ts.git\"\n  },\n  \"homepage\": \"https://github.com/authts/oidc-client-ts#readme\",\n  \"license\": \"Apache-2.0\",\n  \"main\": \"dist/umd/oidc-client-ts.js\",\n  \"types\": \"dist/types/oidc-client-ts.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/types/oidc-client-ts.d.ts\",\n      \"import\": \"./dist/esm/oidc-client-ts.js\",\n      \"require\": \"./dist/umd/oidc-client-ts.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [\n    \"authentication\",\n    \"oauth2\",\n    \"oidc\",\n    \"openid\",\n    \"OpenID Connect\"\n  ],\n  \"scripts\": {\n    \"build\": \"node scripts/build.js && npm run build-types\",\n    \"build-types\": \"tsc -p tsconfig.build.json && api-extractor run\",\n    \"clean\": \"git clean -fdX dist lib *.tsbuildinfo\",\n    \"prepack\": \"npm run build\",\n    \"test\": \"tsc && jest\",\n    \"typedoc\": \"typedoc\",\n    \"lint\": \"eslint --max-warnings=0 --cache .\",\n    \"prepare\": \"husky\"\n  },\n  \"dependencies\": {\n    \"jwt-decode\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3.2.0\",\n    \"@eslint/js\": \"^9.18.0\",\n    \"@microsoft/api-extractor\": \"^7.49.1\",\n    \"@stylistic/eslint-plugin\": \"^2.13.0\",\n    \"@testing-library/jest-dom\": \"^6.6.3\",\n    \"@types/jest\": \"^29.5.14\",\n    \"@types/node\": \"^22.10.1\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.20.0\",\n    \"@typescript-eslint/parser\": \"^8.20.0\",\n    \"esbuild\": \"^0.25.0\",\n    \"eslint\": \"^9.18.0\",\n    \"eslint-plugin-testing-library\": \"^7.1.1\",\n    \"fake-indexeddb\": \"^6.0.0\",\n    \"globals\": \"^16.0.0\",\n    \"http-proxy-middleware\": \"^3.0.3\",\n    \"husky\": \"^9.1.7\",\n    \"jest\": \"^29.7.0\",\n    \"jest-environment-jsdom\": \"^29.7.0\",\n    \"jest-mock\": \"^29.7.0\",\n    \"jose\": \"^5.9.6\",\n    \"lint-staged\": \"^16.1.0\",\n    \"ts-jest\": \"^29.2.5\",\n    \"typedoc\": \"^0.28.0\",\n    \"typescript\": \"~5.8.2\",\n    \"yn\": \"^5.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"lint-staged\": {\n    \"*.{js,jsx,ts,tsx}\": \"eslint --cache --fix\"\n  }\n}\n","// @ts-expect-error avoid enabling resolveJsonModule to keep build process simple\nimport { version } from \"../package.json\";\n\n/**\n * @public\n */\nexport const Version: string = version;\n","import { DPoPState, type DPoPStore } from \"./DPoPStore\";\n\n/**\n * Provides a default implementation of the DPoP store using IndexedDB.\n *\n * @public\n */\nexport class IndexedDbDPoPStore implements DPoPStore {\n    readonly _dbName: string = \"oidc\";\n    readonly _storeName: string = \"dpop\";\n\n    public async set(key: string, value: DPoPState): Promise<void> {\n        const store = await this.createStore(this._dbName, this._storeName);\n        await store(\"readwrite\", (str: IDBObjectStore) => {\n            str.put(value, key);\n            return this.promisifyRequest(str.transaction);\n        });\n    }\n\n    public async get(key: string): Promise<DPoPState> {\n        const store = await this.createStore(this._dbName, this._storeName);\n        return await store(\"readonly\", (str) => {\n            return this.promisifyRequest(str.get(key));\n        }) as DPoPState;\n    }\n\n    public async remove(key: string): Promise<DPoPState> {\n        const item = await this.get(key);\n        const store = await this.createStore(this._dbName, this._storeName);\n        await store(\"readwrite\", (str) => {\n            return this.promisifyRequest(str.delete(key));\n        });\n        return item;\n    }\n\n    public async getAllKeys(): Promise<string[]> {\n        const store = await this.createStore(this._dbName, this._storeName);\n        return await store(\"readonly\", (str) => {\n            return this.promisifyRequest(str.getAllKeys());\n        }) as string[];\n    }\n\n    promisifyRequest<T = undefined>(\n        request: IDBRequest<T> | IDBTransaction): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            (request as IDBTransaction).oncomplete = (request as IDBRequest<T>).onsuccess = () => resolve((request as IDBRequest<T>).result);\n            (request as IDBTransaction).onabort = (request as IDBRequest<T>).onerror = () => reject((request as IDBRequest<T>).error as Error);\n        });\n    }\n\n    async createStore<T>(\n        dbName: string,\n        storeName: string,\n    ): Promise<(txMode: IDBTransactionMode, callback: (store: IDBObjectStore) => T | PromiseLike<T>) => Promise<T>> {\n        const request = indexedDB.open(dbName);\n        request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n        const db = await this.promisifyRequest<IDBDatabase>(request);\n\n        return async (\n            txMode: IDBTransactionMode,\n            callback: (store: IDBObjectStore) => T | PromiseLike<T>,\n        ) => {\n            const tx = db.transaction(storeName, txMode);\n            const store = tx.objectStore(storeName);\n            return await callback(store);\n        };\n    }\n}\n"],"names":["Log","logger","logger","logger","logger","logger","logger","logger","logger","logger","logger","logger","_a","logger","logger"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"debugId":null}}]
}